document.write('<link rel="stylesheet" href="https://github.githubassets.com/assets/gist-embed-5687a589e344.css">')
document.write('<div id=\"gist113222310\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-how-to-create-modify-and-loop-through-objects-in-javascript-digitalocean-md\" class=\"file my-2\">\n      <div id=\"file-how-to-create-modify-and-loop-through-objects-in-javascript-digitalocean-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h3 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Introduction<\/h3>\n<p dir=\"auto\">An <strong>object<\/strong> in JavaScript is a <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-javascript\" rel=\"nofollow\">data type<\/a> that is composed of a collection of <strong>names<\/strong> or <strong>keys<\/strong> and <strong>values<\/strong>, represented in <strong>name:value pairs<\/strong>. The name:value pairs can consist of <strong>properties<\/strong> that may contain any data type — including strings, numbers, and Booleans — as well as <strong>methods<\/strong>, which are functions contained within an object.<\/p>\n<p dir=\"auto\">Objects in JavaScript are standalone entities that can be likened to objects in real life. For example, a book might be an object which you would describe by the title, author, number of pages, and genre. Similarly, a car might be an object that you would describe by the color, make, model, and horsepower. JavaScript <a href=\"https://www.digitalocean.com/community/tutorials/understanding-arrays-in-javascript\" rel=\"nofollow\">arrays<\/a> are also a type of object.<\/p>\n<p dir=\"auto\">Objects are an integral and foundational aspect of most JavaScript programs. For example, a user account object may contain such data as usernames, passwords, and e-mail addresses. Another common use case is a web shopping platform’s shopping cart that could consist of an array of many objects containing all the pertinent information for each item, such as name, price, and weight for shipping information. A to-do list is another common application that might consist of objects.<\/p>\n<p dir=\"auto\">In this tutorial, we will review how to create an object, what object properties and methods are, and how to access, add, delete, modify, and loop through object properties.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-creating-an-object\" class=\"anchor\" aria-hidden=\"true\" href=\"#creating-an-object\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Creating an Object<\/h2>\n<p dir=\"auto\">An object is a <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-javascript\" rel=\"nofollow\">JavaScript data type<\/a>, just as a number or a string is also a data type. As a data type, an object can be contained in a variable.<\/p>\n<p dir=\"auto\">There are two ways to construct an object in JavaScript:<\/p>\n<ul dir=\"auto\">\n<li>The <strong>object literal<\/strong>, which uses curly brackets: <code>{}<\/code><\/li>\n<li>The <strong>object constructor<\/strong>, which uses the <code>new<\/code> keyword<\/li>\n<\/ul>\n<p dir=\"auto\">We can make an empty object example using both methods for demonstration purposes.<\/p>\n<p dir=\"auto\">First, the object literal.<\/p>\n<p dir=\"auto\">The object literal initializes the object with curly brackets.<\/p>\n<p dir=\"auto\">In this next example, we’ll use the object constructor.<\/p>\n<p dir=\"auto\">The same data was created using the object constructor method that is initialized with <code>new Object()<\/code>.<\/p>\n<p dir=\"auto\">Both of these approaches will create an empty object. Using object literals is the more common and preferred method, as it has less potential for inconsistencies and unexpected results.<\/p>\n<p dir=\"auto\">We can create an example object, contained in the variable <code>gimli<\/code>, to describe a character.<\/p>\n<p dir=\"auto\">Our new object is <code>gimli<\/code>, which has three properties. Each property consists of a <strong>name:value<\/strong> pair, also known as <strong>key:value<\/strong> pair. <code>weapon<\/code> is one of the property names, which is linked to the property value <code>\"axe\"<\/code>, a string. It has one method, with a method name of <code>greet<\/code> and the method value consisting of the contents of the function.<\/p>\n<p dir=\"auto\">Within <code>greet<\/code>, you may notice the <code>this<\/code> keyword. When using <code>this<\/code> inside of an object, it refers to the current object, in this case <code>gimli<\/code>.<\/p>\n<p dir=\"auto\">Sending <code>gimli<\/code> to the console will print out the entire object.<\/p>\n<pre><code>Output{name: \"Gimli\", race: \"dwarf\", weapon: \"axe\", greet: ƒ}\n<\/code><\/pre>\n<p dir=\"auto\">This output may render differently depending on what console you are using, but you should notice that all of the values passed to the object are shown in the output.<\/p>\n<p dir=\"auto\">Next, we will review a JavaScript object’s properties and methods.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-properties-and-methods\" class=\"anchor\" aria-hidden=\"true\" href=\"#properties-and-methods\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Properties and Methods<\/h2>\n<p dir=\"auto\">Objects can have <strong>properties<\/strong> and <strong>methods<\/strong>.<\/p>\n<p dir=\"auto\">A property is the association between a name (key) and value within an object, and it can contain any datatype. A property generally refers to the characteristic of an object.<\/p>\n<p dir=\"auto\">A method is a function that is the value of an object property, and therefore a task that an object can perform.<\/p>\n<p dir=\"auto\">An easy way to remember the difference between object properties and methods is to think of a property as a noun, and a method as a verb. <code>name<\/code>, <code>race<\/code> and <code>weapon<\/code> are all nouns associated with an object, and are properties. <code>fight()<\/code> or <code>talk()<\/code> are verbs that might be used as a method function definition.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-accessing-object-properties\" class=\"anchor\" aria-hidden=\"true\" href=\"#accessing-object-properties\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Accessing Object Properties<\/h2>\n<p dir=\"auto\">There are two ways to access an object’s properties.<\/p>\n<ul dir=\"auto\">\n<li>Dot notation: <code>.<\/code><\/li>\n<li>Bracket notation: <code>[]<\/code><\/li>\n<\/ul>\n<p dir=\"auto\">Let’s revisit our original example object, <code>gimli<\/code>.<\/p>\n<p dir=\"auto\">If we want to retrieve the property value of <code>weapon<\/code>, we can do so with object dot notation by typing the variable name of the object, followed by a dot (<code>.<\/code>) and the property or method name.<\/p>\n<pre><code>Output\"axe\"\n<\/code><\/pre>\n<p dir=\"auto\"><code>gimli.weapon<\/code> outputs the property value, which is <code>\"axe\"<\/code>. We can also retrieve the same data with object bracket notation. Similar to how you might <a href=\"https://www.digitalocean.com/community/tutorials/how-to-index-split-and-manipulate-strings-in-javascript\" rel=\"nofollow\">index and access a string<\/a>, the syntax for bracket notation is two square brackets (<code>[]<\/code>) encasing the property name.<\/p>\n<pre><code>Output\"axe\"\n<\/code><\/pre>\n<p dir=\"auto\">Both dot notation and bracket notation are used regularly. Dot notation is faster and more readable, but has more limitations. Bracket notation allows access to property names stored in a variable, and must be used if an object’s property contains any sort of special character.<\/p>\n<p dir=\"auto\">In order to retrieve an object method, you would call it much in the same way you would call a regular function, just attached to the object variable.<\/p>\n<pre><code>Output\"Hi, my name is Gimli!\"\n<\/code><\/pre>\n<p dir=\"auto\">In the example above, we see that the string value for the object method <code>greet()<\/code> is returned.<\/p>\n<p dir=\"auto\">We can now move on to modifying object properties through adding name:value pairs or modifying existing ones.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-adding-and-modifying-object-properties\" class=\"anchor\" aria-hidden=\"true\" href=\"#adding-and-modifying-object-properties\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Adding and Modifying Object Properties<\/h2>\n<p dir=\"auto\">In order to add a new property to an object, you would assign a new value to a property with the assignment operator (<code>=<\/code>).<\/p>\n<p dir=\"auto\">For example, we can add a numerical data type to the <code>gimli<\/code> object as the new <code>age<\/code> property. Both the dot and bracket notation can be used to add a new object property.<\/p>\n<p dir=\"auto\">We can access that value just as above, with either the dot notation or the bracket notation.<\/p>\n<pre><code>Output139\n<\/code><\/pre>\n<p dir=\"auto\">A method can also be added to the object by using the same process.<\/p>\n<p dir=\"auto\">Once we have created this new object method, we can call it as we did above.<\/p>\n<pre><code>Output\"Gimli attacks with an axe.\"\n<\/code><\/pre>\n<p dir=\"auto\">Using the same method, an object’s property can be modified by assigning a new value to an existing property.<\/p>\n<p dir=\"auto\">At this point, if we call the object, we will see all of our additions and modifications.<\/p>\n<pre><code>Output{name: \"Gimli\", race: \"dwarf\", weapon: \"battle axe\", age: 139, greet: ƒ, fight: ƒ}\n<\/code><\/pre>\n<p dir=\"auto\">Through assignment operation, we can modify the properties and methods of a JavaScript object.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-removing-object-properties\" class=\"anchor\" aria-hidden=\"true\" href=\"#removing-object-properties\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Removing Object Properties<\/h2>\n<p dir=\"auto\">In order to remove a property from an object, you will utilize the <code>delete<\/code> keyword. <code>delete<\/code> is an operator that removes a property from an object.<\/p>\n<p dir=\"auto\">In the below example, we will remove the <code>weapon<\/code> property from <code>gimli<\/code> using <code>delete<\/code>.<\/p>\n<pre><code>Outputtrue\n<\/code><\/pre>\n<p dir=\"auto\">The <code>delete<\/code> operation evaluates as <code>true<\/code> if the property was successfully removed, or if it was used on a property that doesn’t exist.<\/p>\n<p dir=\"auto\">We can test the output of <code>gimli<\/code> to see if it succeeded.<\/p>\n<pre><code>Output{name: \"Gimli\", race: \"dwarf\", age: 139, greet: ƒ, fight: ƒ}\n<\/code><\/pre>\n<p dir=\"auto\">In the above output, the <code>weapon<\/code> name and its associated value are no longer available, showing that we have successfully deleted the property.<\/p>\n<p dir=\"auto\">In the next section, we’ll go over ways to iterate through objects in JavaScript.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-looping-through-object-properties\" class=\"anchor\" aria-hidden=\"true\" href=\"#looping-through-object-properties\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Looping Through Object Properties<\/h2>\n<p dir=\"auto\">JavaScript has a built-in type of <code>for<\/code> loop that is specifically meant for iterating over the properties of an object. This is known as the <code>for...in<\/code> loop.<\/p>\n<p dir=\"auto\">Here is a simplified version of our main object example, <code>gimli<\/code>.<\/p>\n<p dir=\"auto\">We can use <code>for...in<\/code> to traverse through all the properties of <code>gimli<\/code> and print them to the console. Using bracket notation, we can retrieve the property value as a variable, in this case <code>key<\/code>.<\/p>\n<pre><code>OutputGimli\ndwarf\nbattle axe\n<\/code><\/pre>\n<p dir=\"auto\">We can also retrieve the property name itself using just the first variabe in the <code>for...in<\/code> loop. We have used a string method to <a href=\"https://www.digitalocean.com/community/tutorials/how-to-index-split-and-manipulate-strings-in-javascript#converting-to-upper-or-lower-case\" rel=\"nofollow\">convert the key values to upper case<\/a>.<\/p>\n<pre><code>OutputNAME: Gimli\nRACE: dwarf\nWEAPON: battle axe\n<\/code><\/pre>\n<p dir=\"auto\">The <code>for...in<\/code> loop is not to be confused with the <code>for...of<\/code> loop, which is used exclusively on the Array object type. You can learn more about iterating through arrays in the “<a href=\"https://www.digitalocean.com/community/tutorials/understanding-arrays-in-javascript#looping-through-an-array\" rel=\"nofollow\">Understanding Arrays in JavaScript<\/a>” tutorial.<\/p>\n<p dir=\"auto\">Another useful enumeration method is the <code>Object.keys()<\/code> method, which will return an array of the object’s keys.<\/p>\n<pre><code>Output[\"name\", \"race\", \"weapon\"]\n<\/code><\/pre>\n<p dir=\"auto\">This method allows us to work with the keys or names of an object as an array, so you can leverage all of the methods available to JavaScript arrays.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-conclusion\" class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Conclusion<\/h2>\n<p dir=\"auto\">Objects are an extremely useful and versatile feature of the JavaScript programming language. They are some of the main building blocks of writing code in JavaScript, and are a practical way to organize related data and functionality. To-do lists, shopping carts, user accounts, and locations on a webmap are all a few of the many examples of real-world JavaScript objects that you might encounter.<\/p>\n<p dir=\"auto\">In this tutorial, we learned the difference between properties and methods, how to create objects, and how to add, remove, modify, and loop through object properties. To learn more about JavaScript objects, read about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects\" rel=\"nofollow\">Working with Objects<\/a> on the Mozilla Developer Network.<\/p>\n<\/article>\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45/raw/4f00bac8747a9543aa1f251d228c09fd8e796183/How%20To%20Create,%20Modify,%20and%20Loop%20through%20Objects%20in%20JavaScript%20%20DigitalOcean.md\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45#file-how-to-create-modify-and-loop-through-objects-in-javascript-digitalocean-md\">\n          How To Create, Modify, and Loop through Objects in JavaScript  DigitalOcean.md\n        <\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-how-to-use-object-methods-in-javascript-digitalocean-md\" class=\"file my-2\">\n      <div id=\"file-how-to-use-object-methods-in-javascript-digitalocean-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h3 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Introduction<\/h3>\n<p dir=\"auto\"><a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\" rel=\"nofollow\">Objects<\/a> in JavaScript are collections of <strong>key<\/strong>/<strong>value<\/strong> pairs. The values can consist of <strong>properties<\/strong> and <strong>methods<\/strong>, and may contain all other JavaScript data types, such as strings, numbers, and Booleans.<\/p>\n<p dir=\"auto\">All objects in JavaScript descend from the parent <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"nofollow\"><code>Object<\/code><\/a> constructor. <code>Object<\/code> has many useful built-in methods we can use and access to make working with individual objects straightforward. Unlike <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-mutator-methods\" rel=\"nofollow\">Array prototype methods<\/a> like <code>sort()<\/code> and <code>reverse()<\/code> that are used on the array instance, Object methods are used directly on the <code>Object<\/code> constructor, and use the object instance as a parameter. This is known as a static method.<\/p>\n<p dir=\"auto\">This tutorial will go over important built-in object methods, with each section below dealing with a specific method and providing an example of use.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-prerequisites\" class=\"anchor\" aria-hidden=\"true\" href=\"#prerequisites\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Prerequisites<\/h2>\n<p dir=\"auto\">In order to get the most out of this tutorial, you should be familiar with creating, modifying, and working with objects, which you can review in the “<a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\" rel=\"nofollow\">Understanding Objects in JavaScript<\/a>” article.<\/p>\n<p dir=\"auto\">For additional guidance on JavaScript in general, you can review our <em><a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-javascript\" rel=\"nofollow\">How To Code in JavaScript<\/a><\/em> series.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-objectcreate\" class=\"anchor\" aria-hidden=\"true\" href=\"#objectcreate\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Object.create()<\/h2>\n<p dir=\"auto\">The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" rel=\"nofollow\"><code>Object.create()<\/code><\/a> method is used to create a new object and link it to the prototype of an existing object.<\/p>\n<p dir=\"auto\">We can create a <code>job<\/code> object instance, and extend it to a more specific object.<\/p>\n<pre><code>OutputThe barista position is hourly and is accepting applications.\n<\/code><\/pre>\n<p dir=\"auto\">The <code>barista<\/code> object now has one property — <code>position<\/code> — but all the other properties and methods from <code>job<\/code> are available through the prototype. <code>Object.create()<\/code> is useful for keeping code <a href=\"https://www.digitalocean.com/community/tutorials/digitalocean-community-glossary#dry-development\" rel=\"nofollow\">DRY<\/a> by minimizing duplication.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-objectkeys\" class=\"anchor\" aria-hidden=\"true\" href=\"#objectkeys\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Object.keys()<\/h2>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow\"><code>Object.keys()<\/code><\/a> creates an array containing the keys of an object.<\/p>\n<p dir=\"auto\">We can create an object and print the array of keys.<\/p>\n<pre><code>Output[\"boss\", \"secretary\", \"sales\", \"accountant\"]\n<\/code><\/pre>\n<p dir=\"auto\">As <code>Object.keys<\/code> converts your object’s keys into an array of keys, the <code>forEach()<\/code> array method can be used to iterate through the keys and values.<\/p>\n<pre><code>Outputboss: Michael\nsecretary: Pam\nsales: Jim\naccountant: Oscar\n<\/code><\/pre>\n<p dir=\"auto\"><code>Object.keys<\/code> is also useful for checking the length of the converted array using the <code>length<\/code> property.<\/p>\n<pre><code>Output4\n<\/code><\/pre>\n<p dir=\"auto\">Using the <code>length<\/code> property, we were able to count the <code>4<\/code> properties of <code>employees<\/code>.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-objectvalues\" class=\"anchor\" aria-hidden=\"true\" href=\"#objectvalues\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Object.values()<\/h2>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\" rel=\"nofollow\"><code>Object.values()<\/code><\/a> creates an array containing the values of an object.<\/p>\n<pre><code>Output[1, \"26-July-2018\", \"mobile\", \"Chrome\"]\n<\/code><\/pre>\n<p dir=\"auto\"><code>Object.keys()<\/code> and <code>Object.values()<\/code> allow you to return the data from an object.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-objectentries\" class=\"anchor\" aria-hidden=\"true\" href=\"#objectentries\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Object.entries()<\/h2>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\" rel=\"nofollow\"><code>Object.entries()<\/code><\/a> creates a nested array of the key/value pairs of an object.<\/p>\n<pre><code>Output[\n    [\"name\", \"Ubuntu\"]\n    [\"version\", 18.04]\n    [\"license\", \"Open Source\"]\n]\n<\/code><\/pre>\n<p dir=\"auto\">Once we have the key/value pair arrays, we can use the <code>forEach()<\/code> method to loop through and work with the results.<\/p>\n<pre><code>Outputname: Ubuntu\nversion: 18.04\nlicense: Open Source\n<\/code><\/pre>\n<p dir=\"auto\">The <code>Object.entries()<\/code> method will only return the object instance’s own properties, and not any properties that may be inherited through its prototype.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-objectassign\" class=\"anchor\" aria-hidden=\"true\" href=\"#objectassign\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Object.assign()<\/h2>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"nofollow\"><code>Object.assign()<\/code><\/a> is used to copy values from one object to another.<\/p>\n<p dir=\"auto\">We can create two objects, and merge them with <code>Object.assign()<\/code>.<\/p>\n<pre><code>Output{firstName: \"Philip\", lastName: \"Fry\", job: \"Delivery Boy\", employer: \"Planet Express\"}\n<\/code><\/pre>\n<p dir=\"auto\">It is also possible to use the spread operator (<code>...<\/code>) to accomplish the same task. In the code below, we’ll modify how we declare <code>character<\/code> through merging the <code>name<\/code> and <code>details<\/code> objects.<\/p>\n<pre><code>Output{firstName: \"Philip\", lastName: \"Fry\", job: \"Delivery Boy\", employer: \"Planet Express\"}\n<\/code><\/pre>\n<p dir=\"auto\">This <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals\" rel=\"nofollow\">spread syntax<\/a> in object literals is also known as shallow-cloning.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-objectfreeze\" class=\"anchor\" aria-hidden=\"true\" href=\"#objectfreeze\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Object.freeze()<\/h2>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" rel=\"nofollow\"><code>Object.freeze()<\/code><\/a> prevents modification to properties and values of an object, and prevents properties from being added or removed from an object.<\/p>\n<pre><code>Output{username: \"AzureDiamond\", password: \"hunter2\"}\n<\/code><\/pre>\n<p dir=\"auto\">In the example above, we tried to override the password <code>hunter2<\/code> with <code>*******<\/code>, but the <code>password<\/code> property remained the same. We also tried to add a new property, <code>active<\/code>, but it was not added.<\/p>\n<p dir=\"auto\"><code>Object.isFrozen()<\/code> is available to determine whether an object has been frozen or not, and returns a Boolean.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-objectseal\" class=\"anchor\" aria-hidden=\"true\" href=\"#objectseal\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Object.seal()<\/h2>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" rel=\"nofollow\"><code>Object.seal()<\/code><\/a> prevents new properties from being added to an object, but allows the modification of existing properties. This method is similar to <code>Object.freeze()<\/code>. Refresh your console before implementing the code below to avoid an error.<\/p>\n<pre><code>Output{username: \"AzureDiamond\", password: \"*******\"}\n<\/code><\/pre>\n<p dir=\"auto\">The new <code>active<\/code> property was not added to the sealed object, but the <code>password<\/code> property was successfully changed.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-objectgetprototypeof\" class=\"anchor\" aria-hidden=\"true\" href=\"#objectgetprototypeof\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Object.getPrototypeOf()<\/h2>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\" rel=\"nofollow\"><code>Object.getPrototypeOf()<\/code><\/a> is used to get the internal hidden <code>[[Prototype]]<\/code> of an object, also accessible through the <code>__proto__<\/code> property.<\/p>\n<p dir=\"auto\">In this example, we can create an array, which has access to the <code>Array<\/code> prototype.<\/p>\n<pre><code>Output[constructor: ƒ, concat: ƒ, find: ƒ, findIndex: ƒ, pop: ƒ, …]\n<\/code><\/pre>\n<p dir=\"auto\">We can see in the output that the prototype of the <code>employees<\/code> array has access to <code>pop<\/code>, <code>find<\/code>, and other Array prototype methods. We can confirm this by testing the <code>employees<\/code> prototype against <code>Array.prototype<\/code>.<\/p>\n<pre><code>Object.getPrototypeOf(employees) === Array.prototype;\n<\/code><\/pre>\n<pre><code>Outputtrue\n<\/code><\/pre>\n<p dir=\"auto\">This method can be useful to get more information about an object or ensure it has access to the prototype of another object.<\/p>\n<p dir=\"auto\">There is also a related <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" rel=\"nofollow\"><code>Object.setPrototypeOf()<\/code><\/a> method that will add one prototype to another object.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-conclusion\" class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Conclusion<\/h2>\n<p dir=\"auto\">Objects have many useful methods that help us modify, protect, and iterate through them. In this tutorial, we reviewed how to create and assign new objects, iterate through the keys and/or values of an object, and freeze or seal an object.<\/p>\n<p dir=\"auto\">If you need to review JavaScript objects you can read “<a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\" rel=\"nofollow\">Understanding Objects in JavaScript<\/a>.” If you would like to familiarize yourself with the prototype chain, you can take a look at “<a href=\"https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript\" rel=\"nofollow\">Understanding Prototypes and Inheritance in JavaScript<\/a>.”<\/p>\n<\/article>\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45/raw/4f00bac8747a9543aa1f251d228c09fd8e796183/How%20To%20Use%20Object%20Methods%20in%20JavaScript%20%20DigitalOcean.md\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45#file-how-to-use-object-methods-in-javascript-digitalocean-md\">\n          How To Use Object Methods in JavaScript  DigitalOcean.md\n        <\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-how-to-work-with-prototypes-and-inheritance-in-javascript-digitalocean-1-md\" class=\"file my-2\">\n      <div id=\"file-how-to-work-with-prototypes-and-inheritance-in-javascript-digitalocean-1-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h3 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Introduction<\/h3>\n<p dir=\"auto\">JavaScript is a <strong>prototype-based language<\/strong>, meaning object properties and methods can be shared through generalized objects that have the ability to be cloned and extended. This is known as prototypical inheritance and differs from class inheritance. Among popular object-oriented programming languages, JavaScript is relatively unique, as other prominent languages such as PHP, Python, and Java are class-based languages, which instead define classes as blueprints for objects.<\/p>\n<p dir=\"auto\">In this tutorial, we will learn what object prototypes are and how to use the constructor function to extend prototypes into new objects. We will also learn about inheritance and the prototype chain.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-javascript-prototypes\" class=\"anchor\" aria-hidden=\"true\" href=\"#javascript-prototypes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>JavaScript Prototypes<\/h2>\n<p dir=\"auto\">In <a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\" rel=\"nofollow\">Understanding Objects in JavaScript<\/a>, we went over the object data type, how to create an object, and how to access and modify object properties. Now we will learn how prototypes can be used to extend objects.<\/p>\n<p dir=\"auto\">Every object in JavaScript has an internal property called <code>[[Prototype]]<\/code>. We can demonstrate this by creating a new, empty object.<\/p>\n<p dir=\"auto\">This is the way we would normally create an object, but note that another way to accomplish this is with the object constructor: <code>let x = new Object()<\/code>.<\/p>\n<p dir=\"auto\">The double square brackets that enclose <code>[[Prototype]]<\/code> signify that it is an internal property, and cannot be accessed directly in code.<\/p>\n<p dir=\"auto\">To find the <code>[[Prototype]]<\/code> of this newly created object, we will use the <code>getPrototypeOf()<\/code> method.<\/p>\n<p dir=\"auto\">The output will consist of several built-in properties and methods.<\/p>\n<pre><code>Output{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, …}\n<\/code><\/pre>\n<p dir=\"auto\">Another way to find the <code>[[Prototype]]<\/code> is through the <code>__proto__<\/code> property. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\" rel=\"nofollow\"><code>__proto__<\/code><\/a> is a property that exposes the internal <code>[[Prototype]]<\/code> of an object.<\/p>\n<p dir=\"auto\">It is important to note that <code>.__proto__<\/code> is a legacy feature and should not be used in production code, and it is not present in every modern browser. However, we can use it throughout this article for demonstrative purposes.<\/p>\n<p dir=\"auto\">The output will be the same as if you had used <code>getPrototypeOf()<\/code>.<\/p>\n<pre><code>Output{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, …}\n<\/code><\/pre>\n<p dir=\"auto\">It is important that every object in JavaScript has a <code>[[Prototype]]<\/code> as it creates a way for any two or more objects to be linked.<\/p>\n<p dir=\"auto\">Objects that you create have a <code>[[Prototype]]<\/code>, as do built-in objects, such as <code>Date<\/code> and <code>Array<\/code>. A reference can be made to this internal property from one object to another via the <code>prototype<\/code> property, as we will see later in this tutorial.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-prototype-inheritance\" class=\"anchor\" aria-hidden=\"true\" href=\"#prototype-inheritance\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Prototype Inheritance<\/h2>\n<p dir=\"auto\">When you attempt to access a property or method of an object, JavaScript will first search on the object itself, and if it is not found, it will search the object’s <code>[[Prototype]]<\/code>. If after consulting both the object and its <code>[[Prototype]]<\/code> still no match is found, JavaScript will check the prototype of the linked object, and continue searching until the end of the prototype chain is reached.<\/p>\n<p dir=\"auto\">At the end of the prototype chain is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" rel=\"nofollow\"><code>Object.prototype<\/code><\/a>. All objects inherit the properties and methods of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"nofollow\"><code>Object<\/code><\/a>. Any attempt to search beyond the end of the chain results in <code>null<\/code>.<\/p>\n<p dir=\"auto\">In our example, <code>x<\/code> is an empty object that inherits from <code>Object<\/code>. <code>x<\/code> can use any property or method that <code>Object<\/code> has, such as <code>toString()<\/code>.<\/p>\n<pre><code>Output[object Object]\n<\/code><\/pre>\n<p dir=\"auto\">This prototype chain is only one link long. <code>x<\/code> -&gt; <code>Object<\/code>. We know this, because if we try to chain two <code>[[Prototype]]<\/code> properties together, it will be <code>null<\/code>.<\/p>\n<pre><code>x.__proto__.__proto__;\n<\/code><\/pre>\n<pre><code>Outputnull\n<\/code><\/pre>\n<p dir=\"auto\">Let’s look at another type of object. If you have experience <a href=\"https://www.digitalocean.com/community/tutorial_series/working-with-arrays-in-javascript\" rel=\"nofollow\">Working with Arrays in JavaScript<\/a>, you know they have many built-in methods, such as <code>pop()<\/code> and <code>push()<\/code>. The reason you have access to these methods when you create a new array is because any array you create has access to the properties and methods on the <code>Array.prototype<\/code>.<\/p>\n<p dir=\"auto\">We can test this by creating a new array.<\/p>\n<p dir=\"auto\">Keep in mind that we could also write it as an array constructor, <code>let y = new Array()<\/code>.<\/p>\n<p dir=\"auto\">If we take a look at the <code>[[Prototype]]<\/code> of the new <code>y<\/code> array, we will see that it has more properties and methods than the <code>x<\/code> object. It has inherited everything from <code>Array.prototype<\/code>.<\/p>\n<pre><code>[constructor: ƒ, concat: ƒ, pop: ƒ, push: ƒ, …]\n<\/code><\/pre>\n<p dir=\"auto\">You will notice a <code>constructor<\/code> property on the prototype that is set to <code>Array()<\/code>. The <code>constructor<\/code> property returns the constructor function of an object, which is a mechanism used to construct objects from functions.<\/p>\n<p dir=\"auto\">We can chain two prototypes together now, since our prototype chain is longer in this case. It looks like <code>y<\/code> -&gt; <code>Array<\/code> -&gt; <code>Object<\/code>.<\/p>\n<pre><code>Output{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, …}\n<\/code><\/pre>\n<p dir=\"auto\">This chain is now referring to <code>Object.prototype<\/code>. We can test the internal <code>[[Prototype]]<\/code> against the <code>prototype<\/code> property of the constructor function to see that they are referring to the same thing.<\/p>\n<p dir=\"auto\">We can also use the <code>isPrototypeOf()<\/code> method to accomplish this.<\/p>\n<p dir=\"auto\">We can use the <code>instanceof<\/code> operator to test whether the <code>prototype<\/code> property of a constructor appears anywhere within an object’s prototype chain.<\/p>\n<p dir=\"auto\">To summarize, all JavaScript objects have a hidden, internal <code>[[Prototype]]<\/code> property (which may be exposed through <code>__proto__<\/code> in some browsers). Objects can be extended and will inherit the properties and methods on <code>[[Prototype]]<\/code> of their constructor.<\/p>\n<p dir=\"auto\">These prototypes can be chained, and each additional object will inherit everything throughout the chain. The chain ends with the <code>Object.prototype<\/code>.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-constructor-functions\" class=\"anchor\" aria-hidden=\"true\" href=\"#constructor-functions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Constructor Functions<\/h2>\n<p dir=\"auto\"><strong>Constructor functions<\/strong> are functions that are used to construct new objects. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\" rel=\"nofollow\"><code>new<\/code> operator<\/a> is used to create new instances based off a constructor function. We have seen some built-in JavaScript constructors, such as <code>new Array()<\/code> and <code>new Date()<\/code>, but we can also create our own custom templates from which to build new objects.<\/p>\n<p dir=\"auto\">As an example, let’s say we are creating a very simple, text-based role-playing game. A user can select a character and then choose what character class they will have, such as warrior, healer, thief, and so on.<\/p>\n<p dir=\"auto\">Since each character will share many characteristics, such as having a name, a level, and hit points, it makes sense to create a constructor as a template. However, since each character class may have vastly different abilities, we want to make sure each character only has access to their own abilities. Let’s take a look at how we can accomplish this with prototype inheritance and constructors.<\/p>\n<p dir=\"auto\">To begin, a constructor function is just a regular function. It becomes a constructor when it is called on by an instance with the <code>new<\/code> keyword. In JavaScript, we capitalize the first letter of a constructor function by convention.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">We have created a constructor function called <code>Hero<\/code> with two parameters: <code>name<\/code> and <code>level<\/code>. Since every character will have a name and a level, it makes sense for each new character to have these properties. The <code>this<\/code> keyword will refer to the new instance that is created, so setting <code>this.name<\/code> to the <code>name<\/code> parameter ensures the new object will have a <code>name<\/code> property set.<\/p>\n<p dir=\"auto\">Now we can create a new instance with <code>new<\/code>.<\/p>\n<p dir=\"auto\">If we console out <code>hero1<\/code>, we will see a new object has been created with the new properties set as expected.<\/p>\n<pre><code>OutputHero {name: \"Bjorn\", level: 1}\n<\/code><\/pre>\n<p dir=\"auto\">Now if we get the <code>[[Prototype]]<\/code> of <code>hero1<\/code>, we will be able to see the <code>constructor<\/code> as <code>Hero()<\/code>. (Remember, this has the same input as <code>hero1.__proto__<\/code>, but is the proper method to use.)<\/p>\n<pre><code>Outputconstructor: ƒ Hero(name, level)\n<\/code><\/pre>\n<p dir=\"auto\">You may notice that we’ve only defined properties and not methods in the constructor. It is a common practice in JavaScript to define methods on the prototype for increased efficiency and code readability.<\/p>\n<p dir=\"auto\">We can add a method to <code>Hero<\/code> using <code>prototype<\/code>. We’ll create a <code>greet()<\/code> method.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">Since <code>greet()<\/code> is in the <code>prototype<\/code> of <code>Hero<\/code>, and <code>hero1<\/code> is an instance of <code>Hero<\/code>, the method is available to <code>hero1<\/code>.<\/p>\n<pre><code>Output\"Bjorn says hello.\"\n<\/code><\/pre>\n<p dir=\"auto\">If you inspect the <code>[[Prototype]]<\/code> of Hero, you will see <code>greet()<\/code> as an available option now.<\/p>\n<p dir=\"auto\">This is good, but now we want to create character classes for the heroes to use. It wouldn’t make sense to put all the abilities for every class into the <code>Hero<\/code> constructor, because different classes will have different abilities. We want to create new constructor functions, but we also want them to be connected to the original <code>Hero<\/code>.<\/p>\n<p dir=\"auto\">We can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\"><code>call()<\/code><\/a> method to copy over properties from one constructor into another constructor. Let’s create a Warrior and a Healer constructor.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">Both new constructors now have the properties of <code>Hero<\/code> and a few unqiue ones. We’ll add the <code>attack()<\/code> method to <code>Warrior<\/code>, and the <code>heal()<\/code> method to <code>Healer<\/code>.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">At this point, we’ll create our characters with the two new character classes available.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\"><code>hero1<\/code> is now recognized as a <code>Warrior<\/code> with the new properties.<\/p>\n<pre><code>OutputWarrior {name: \"Bjorn\", level: 1, weapon: \"axe\"}\n<\/code><\/pre>\n<p dir=\"auto\">We can use the new methods we set on the <code>Warrior<\/code> prototype.<\/p>\n<pre><code>Console\"Bjorn attacks with the axe.\"\n<\/code><\/pre>\n<p dir=\"auto\">But what happens if we try to use methods further down the prototype chain?<\/p>\n<pre><code>OutputUncaught TypeError: hero1.greet is not a function\n<\/code><\/pre>\n<p dir=\"auto\">Prototype properties and methods are not automatically linked when you use <code>call()<\/code> to chain constructors. We will use <code>Object.setPropertyOf()<\/code> to link the properties in the <code>Hero<\/code> constructor to the <code>Warrior<\/code> and <code>Healer<\/code> constructors, making sure to put it before any additional methods.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">Now we can successfully use prototype methods from <code>Hero<\/code> on an instance of a <code>Warrior<\/code> or <code>Healer<\/code>.<\/p>\n<pre><code>Output\"Bjorn says hello.\"\n<\/code><\/pre>\n<p dir=\"auto\">Here is the full code for our character creation page.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">With this code we’ve created our <code>Hero<\/code> constructor with the base properties, created two character constructors called <code>Warrior<\/code> and <code>Healer<\/code> from the original constructor, added methods to the prototypes and created individual character instances.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-conclusion\" class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Conclusion<\/h2>\n<p dir=\"auto\">JavaScript is a prototype-based language, and functions differently than the traditional class-based paradigm that many other object-oriented languages use.<\/p>\n<p dir=\"auto\">In this tutorial, we learned how prototypes work in JavaScript, and how to link object properties and methods via the hidden <code>[[Prototype]]<\/code> property that all objects share. We also learned how to create custom constructor functions and how prototype inheritance works to pass down property and method values.<\/p>\n<\/article>\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45/raw/4f00bac8747a9543aa1f251d228c09fd8e796183/How%20To%20Work%20with%20Prototypes%20and%20Inheritance%20in%20JavaScript%20%20DigitalOcean%20(1).md\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45#file-how-to-work-with-prototypes-and-inheritance-in-javascript-digitalocean-1-md\">\n          How To Work with Prototypes and Inheritance in JavaScript  DigitalOcean (1).md\n        <\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-how-to-work-with-prototypes-and-inheritance-in-javascript-digitalocean-md\" class=\"file my-2\">\n      <div id=\"file-how-to-work-with-prototypes-and-inheritance-in-javascript-digitalocean-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><h3 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Introduction<\/h3>\n<p dir=\"auto\">JavaScript is a <strong>prototype-based language<\/strong>, meaning object properties and methods can be shared through generalized objects that have the ability to be cloned and extended. This is known as prototypical inheritance and differs from class inheritance. Among popular object-oriented programming languages, JavaScript is relatively unique, as other prominent languages such as PHP, Python, and Java are class-based languages, which instead define classes as blueprints for objects.<\/p>\n<p dir=\"auto\">In this tutorial, we will learn what object prototypes are and how to use the constructor function to extend prototypes into new objects. We will also learn about inheritance and the prototype chain.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-javascript-prototypes\" class=\"anchor\" aria-hidden=\"true\" href=\"#javascript-prototypes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>JavaScript Prototypes<\/h2>\n<p dir=\"auto\">In <a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\" rel=\"nofollow\">Understanding Objects in JavaScript<\/a>, we went over the object data type, how to create an object, and how to access and modify object properties. Now we will learn how prototypes can be used to extend objects.<\/p>\n<p dir=\"auto\">Every object in JavaScript has an internal property called <code>[[Prototype]]<\/code>. We can demonstrate this by creating a new, empty object.<\/p>\n<p dir=\"auto\">This is the way we would normally create an object, but note that another way to accomplish this is with the object constructor: <code>let x = new Object()<\/code>.<\/p>\n<p dir=\"auto\">The double square brackets that enclose <code>[[Prototype]]<\/code> signify that it is an internal property, and cannot be accessed directly in code.<\/p>\n<p dir=\"auto\">To find the <code>[[Prototype]]<\/code> of this newly created object, we will use the <code>getPrototypeOf()<\/code> method.<\/p>\n<p dir=\"auto\">The output will consist of several built-in properties and methods.<\/p>\n<pre><code>Output{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, …}\n<\/code><\/pre>\n<p dir=\"auto\">Another way to find the <code>[[Prototype]]<\/code> is through the <code>__proto__<\/code> property. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\" rel=\"nofollow\"><code>__proto__<\/code><\/a> is a property that exposes the internal <code>[[Prototype]]<\/code> of an object.<\/p>\n<p dir=\"auto\">It is important to note that <code>.__proto__<\/code> is a legacy feature and should not be used in production code, and it is not present in every modern browser. However, we can use it throughout this article for demonstrative purposes.<\/p>\n<p dir=\"auto\">The output will be the same as if you had used <code>getPrototypeOf()<\/code>.<\/p>\n<pre><code>Output{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, …}\n<\/code><\/pre>\n<p dir=\"auto\">It is important that every object in JavaScript has a <code>[[Prototype]]<\/code> as it creates a way for any two or more objects to be linked.<\/p>\n<p dir=\"auto\">Objects that you create have a <code>[[Prototype]]<\/code>, as do built-in objects, such as <code>Date<\/code> and <code>Array<\/code>. A reference can be made to this internal property from one object to another via the <code>prototype<\/code> property, as we will see later in this tutorial.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-prototype-inheritance\" class=\"anchor\" aria-hidden=\"true\" href=\"#prototype-inheritance\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Prototype Inheritance<\/h2>\n<p dir=\"auto\">When you attempt to access a property or method of an object, JavaScript will first search on the object itself, and if it is not found, it will search the object’s <code>[[Prototype]]<\/code>. If after consulting both the object and its <code>[[Prototype]]<\/code> still no match is found, JavaScript will check the prototype of the linked object, and continue searching until the end of the prototype chain is reached.<\/p>\n<p dir=\"auto\">At the end of the prototype chain is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" rel=\"nofollow\"><code>Object.prototype<\/code><\/a>. All objects inherit the properties and methods of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"nofollow\"><code>Object<\/code><\/a>. Any attempt to search beyond the end of the chain results in <code>null<\/code>.<\/p>\n<p dir=\"auto\">In our example, <code>x<\/code> is an empty object that inherits from <code>Object<\/code>. <code>x<\/code> can use any property or method that <code>Object<\/code> has, such as <code>toString()<\/code>.<\/p>\n<pre><code>Output[object Object]\n<\/code><\/pre>\n<p dir=\"auto\">This prototype chain is only one link long. <code>x<\/code> -&gt; <code>Object<\/code>. We know this, because if we try to chain two <code>[[Prototype]]<\/code> properties together, it will be <code>null<\/code>.<\/p>\n<pre><code>x.__proto__.__proto__;\n<\/code><\/pre>\n<pre><code>Outputnull\n<\/code><\/pre>\n<p dir=\"auto\">Let’s look at another type of object. If you have experience <a href=\"https://www.digitalocean.com/community/tutorial_series/working-with-arrays-in-javascript\" rel=\"nofollow\">Working with Arrays in JavaScript<\/a>, you know they have many built-in methods, such as <code>pop()<\/code> and <code>push()<\/code>. The reason you have access to these methods when you create a new array is because any array you create has access to the properties and methods on the <code>Array.prototype<\/code>.<\/p>\n<p dir=\"auto\">We can test this by creating a new array.<\/p>\n<p dir=\"auto\">Keep in mind that we could also write it as an array constructor, <code>let y = new Array()<\/code>.<\/p>\n<p dir=\"auto\">If we take a look at the <code>[[Prototype]]<\/code> of the new <code>y<\/code> array, we will see that it has more properties and methods than the <code>x<\/code> object. It has inherited everything from <code>Array.prototype<\/code>.<\/p>\n<pre><code>[constructor: ƒ, concat: ƒ, pop: ƒ, push: ƒ, …]\n<\/code><\/pre>\n<p dir=\"auto\">You will notice a <code>constructor<\/code> property on the prototype that is set to <code>Array()<\/code>. The <code>constructor<\/code> property returns the constructor function of an object, which is a mechanism used to construct objects from functions.<\/p>\n<p dir=\"auto\">We can chain two prototypes together now, since our prototype chain is longer in this case. It looks like <code>y<\/code> -&gt; <code>Array<\/code> -&gt; <code>Object<\/code>.<\/p>\n<pre><code>Output{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, …}\n<\/code><\/pre>\n<p dir=\"auto\">This chain is now referring to <code>Object.prototype<\/code>. We can test the internal <code>[[Prototype]]<\/code> against the <code>prototype<\/code> property of the constructor function to see that they are referring to the same thing.<\/p>\n<p dir=\"auto\">We can also use the <code>isPrototypeOf()<\/code> method to accomplish this.<\/p>\n<p dir=\"auto\">We can use the <code>instanceof<\/code> operator to test whether the <code>prototype<\/code> property of a constructor appears anywhere within an object’s prototype chain.<\/p>\n<p dir=\"auto\">To summarize, all JavaScript objects have a hidden, internal <code>[[Prototype]]<\/code> property (which may be exposed through <code>__proto__<\/code> in some browsers). Objects can be extended and will inherit the properties and methods on <code>[[Prototype]]<\/code> of their constructor.<\/p>\n<p dir=\"auto\">These prototypes can be chained, and each additional object will inherit everything throughout the chain. The chain ends with the <code>Object.prototype<\/code>.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-constructor-functions\" class=\"anchor\" aria-hidden=\"true\" href=\"#constructor-functions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Constructor Functions<\/h2>\n<p dir=\"auto\"><strong>Constructor functions<\/strong> are functions that are used to construct new objects. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\" rel=\"nofollow\"><code>new<\/code> operator<\/a> is used to create new instances based off a constructor function. We have seen some built-in JavaScript constructors, such as <code>new Array()<\/code> and <code>new Date()<\/code>, but we can also create our own custom templates from which to build new objects.<\/p>\n<p dir=\"auto\">As an example, let’s say we are creating a very simple, text-based role-playing game. A user can select a character and then choose what character class they will have, such as warrior, healer, thief, and so on.<\/p>\n<p dir=\"auto\">Since each character will share many characteristics, such as having a name, a level, and hit points, it makes sense to create a constructor as a template. However, since each character class may have vastly different abilities, we want to make sure each character only has access to their own abilities. Let’s take a look at how we can accomplish this with prototype inheritance and constructors.<\/p>\n<p dir=\"auto\">To begin, a constructor function is just a regular function. It becomes a constructor when it is called on by an instance with the <code>new<\/code> keyword. In JavaScript, we capitalize the first letter of a constructor function by convention.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">We have created a constructor function called <code>Hero<\/code> with two parameters: <code>name<\/code> and <code>level<\/code>. Since every character will have a name and a level, it makes sense for each new character to have these properties. The <code>this<\/code> keyword will refer to the new instance that is created, so setting <code>this.name<\/code> to the <code>name<\/code> parameter ensures the new object will have a <code>name<\/code> property set.<\/p>\n<p dir=\"auto\">Now we can create a new instance with <code>new<\/code>.<\/p>\n<p dir=\"auto\">If we console out <code>hero1<\/code>, we will see a new object has been created with the new properties set as expected.<\/p>\n<pre><code>OutputHero {name: \"Bjorn\", level: 1}\n<\/code><\/pre>\n<p dir=\"auto\">Now if we get the <code>[[Prototype]]<\/code> of <code>hero1<\/code>, we will be able to see the <code>constructor<\/code> as <code>Hero()<\/code>. (Remember, this has the same input as <code>hero1.__proto__<\/code>, but is the proper method to use.)<\/p>\n<pre><code>Outputconstructor: ƒ Hero(name, level)\n<\/code><\/pre>\n<p dir=\"auto\">You may notice that we’ve only defined properties and not methods in the constructor. It is a common practice in JavaScript to define methods on the prototype for increased efficiency and code readability.<\/p>\n<p dir=\"auto\">We can add a method to <code>Hero<\/code> using <code>prototype<\/code>. We’ll create a <code>greet()<\/code> method.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">Since <code>greet()<\/code> is in the <code>prototype<\/code> of <code>Hero<\/code>, and <code>hero1<\/code> is an instance of <code>Hero<\/code>, the method is available to <code>hero1<\/code>.<\/p>\n<pre><code>Output\"Bjorn says hello.\"\n<\/code><\/pre>\n<p dir=\"auto\">If you inspect the <code>[[Prototype]]<\/code> of Hero, you will see <code>greet()<\/code> as an available option now.<\/p>\n<p dir=\"auto\">This is good, but now we want to create character classes for the heroes to use. It wouldn’t make sense to put all the abilities for every class into the <code>Hero<\/code> constructor, because different classes will have different abilities. We want to create new constructor functions, but we also want them to be connected to the original <code>Hero<\/code>.<\/p>\n<p dir=\"auto\">We can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\"><code>call()<\/code><\/a> method to copy over properties from one constructor into another constructor. Let’s create a Warrior and a Healer constructor.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">Both new constructors now have the properties of <code>Hero<\/code> and a few unqiue ones. We’ll add the <code>attack()<\/code> method to <code>Warrior<\/code>, and the <code>heal()<\/code> method to <code>Healer<\/code>.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">At this point, we’ll create our characters with the two new character classes available.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\"><code>hero1<\/code> is now recognized as a <code>Warrior<\/code> with the new properties.<\/p>\n<pre><code>OutputWarrior {name: \"Bjorn\", level: 1, weapon: \"axe\"}\n<\/code><\/pre>\n<p dir=\"auto\">We can use the new methods we set on the <code>Warrior<\/code> prototype.<\/p>\n<pre><code>Console\"Bjorn attacks with the axe.\"\n<\/code><\/pre>\n<p dir=\"auto\">But what happens if we try to use methods further down the prototype chain?<\/p>\n<pre><code>OutputUncaught TypeError: hero1.greet is not a function\n<\/code><\/pre>\n<p dir=\"auto\">Prototype properties and methods are not automatically linked when you use <code>call()<\/code> to chain constructors. We will use <code>Object.setPropertyOf()<\/code> to link the properties in the <code>Hero<\/code> constructor to the <code>Warrior<\/code> and <code>Healer<\/code> constructors, making sure to put it before any additional methods.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">Now we can successfully use prototype methods from <code>Hero<\/code> on an instance of a <code>Warrior<\/code> or <code>Healer<\/code>.<\/p>\n<pre><code>Output\"Bjorn says hello.\"\n<\/code><\/pre>\n<p dir=\"auto\">Here is the full code for our character creation page.<\/p>\n<p dir=\"auto\">characterSelect.js<\/p>\n<p dir=\"auto\">With this code we’ve created our <code>Hero<\/code> constructor with the base properties, created two character constructors called <code>Warrior<\/code> and <code>Healer<\/code> from the original constructor, added methods to the prototypes and created individual character instances.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-conclusion\" class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Conclusion<\/h2>\n<p dir=\"auto\">JavaScript is a prototype-based language, and functions differently than the traditional class-based paradigm that many other object-oriented languages use.<\/p>\n<p dir=\"auto\">In this tutorial, we learned how prototypes work in JavaScript, and how to link object properties and methods via the hidden <code>[[Prototype]]<\/code> property that all objects share. We also learned how to create custom constructor functions and how prototype inheritance works to pass down property and method values.<\/p>\n<\/article>\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45/raw/4f00bac8747a9543aa1f251d228c09fd8e796183/How%20To%20Work%20with%20Prototypes%20and%20Inheritance%20in%20JavaScript%20%20DigitalOcean.md\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45#file-how-to-work-with-prototypes-and-inheritance-in-javascript-digitalocean-md\">\n          How To Work with Prototypes and Inheritance in JavaScript  DigitalOcean.md\n        <\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-tf2_image_retraining-ipynb\" class=\"file my-2\">\n    \n    <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-jupyter-notebook  \">\n\n          <div class=\"render-wrapper \">\n    <div class=\"render-container is-render-pending js-render-target \"\n      data-identity=\"1c9e7888-94a0-4bc5-b04d-4e4df123c180\"\n      data-host=\"https://notebooks.githubusercontent.com\"\n      data-type=\"ipynb\">\n      <svg style=\"box-sizing: content-box; color: var(--color-icon-primary);\" width=\"64\" height=\"64\" viewBox=\"0 0 16 16\" fill=\"none\" data-view-component=\"true\" class=\"octospinner mx-auto anim-rotate\">\n  <circle cx=\"8\" cy=\"8\" r=\"7\" stroke=\"currentColor\" stroke-opacity=\"0.25\" stroke-width=\"2\" vector-effect=\"non-scaling-stroke\" />\n  <path d=\"M15 8a7.002 7.002 0 00-7-7\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" vector-effect=\"non-scaling-stroke\" />\n<\/svg>\n      <div class=\"render-viewer-error\">Sorry, something went wrong. <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45.js\">Reload?<\/a><\/div>\n      <div class=\"render-viewer-fatal\">Sorry, we cannot display this file.<\/div>\n      <div class=\"render-viewer-invalid\">Sorry, this file is invalid so it cannot be displayed.<\/div>\n      <iframe\n        class=\"render-viewer \"\n        src=\"https://notebooks.githubusercontent.com/view/ipynb?color_mode=auto&amp;commit=4f00bac8747a9543aa1f251d228c09fd8e796183&amp;enc_url=68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676973742f62676f6f6e7a2f38653761386534663462623134626431353033653037363865336632626534352f7261772f346630306261633837343761393534336161316632353164323238633039666438653739363138332f7466325f696d6167655f7265747261696e696e672e6970796e62&amp;logged_in=false&amp;nwo=bgoonz%2F8e7a8e4f4bb14bd1503e0768e3f2be45&amp;path=tf2_image_retraining.ipynb&amp;repository_id=113222310&amp;repository_type=Gist#1c9e7888-94a0-4bc5-b04d-4e4df123c180\"\n        sandbox=\"allow-scripts allow-same-origin allow-top-navigation\"\n        title=\"File display\"\n        name=\"1c9e7888-94a0-4bc5-b04d-4e4df123c180\"\n      >\n          Viewer requires iframe.\n      <\/iframe>\n    <\/div>\n  <\/div>\n \n    <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45/raw/4f00bac8747a9543aa1f251d228c09fd8e796183/tf2_image_retraining.ipynb\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45#file-tf2_image_retraining-ipynb\">\n          tf2_image_retraining.ipynb\n        <\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-understanding-destructuring-rest-parameters-and-spread-syntax-in-javascript-digitalocean-md\" class=\"file my-2\">\n      <div id=\"file-understanding-destructuring-rest-parameters-and-spread-syntax-in-javascript-digitalocean-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p dir=\"auto\"><em>The author selected the <a href=\"https://www.brightfunds.org/funds/write-for-donations-covid-19-relief-fund\" rel=\"nofollow\">COVID-19 Relief Fund<\/a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\" rel=\"nofollow\">Write for DOnations<\/a> program.<\/em><\/p>\n<h3 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Introduction<\/h3>\n<p dir=\"auto\">Many new features for working with <a href=\"https://www.digitalocean.com/community/tutorials/understanding-arrays-in-javascript\" rel=\"nofollow\">arrays<\/a> and <a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\" rel=\"nofollow\">objects<\/a> have been made available to the <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-javascript\" rel=\"nofollow\">JavaScript<\/a> language since the <a href=\"http://www.ecma-international.org/ecma-262/6.0/\" rel=\"nofollow\">2015 Edition<\/a> of the ECMAScript specification. A few of the notable ones that you will learn in this article are <em>destructuring<\/em>, <em>rest parameters<\/em>, and <em>spread<\/em> syntax. These features provide more direct ways of accessing the members of an array or an object, and can make working with these data structures quicker and more succinct.<\/p>\n<p dir=\"auto\">Many other languages do not have corresponding syntax for destructuring, rest parameters, and spread, so these features may have a learning curve both for new JavaScript developers and those coming from another language. In this article, you will learn how to destructure objects and arrays, how to use the spread operator to unpack objects and arrays, and how to use rest parameters in function calls.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-destructuring\" class=\"anchor\" aria-hidden=\"true\" href=\"#destructuring\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Destructuring<\/h2>\n<p dir=\"auto\"><em>Destructuring assignment<\/em> is a syntax that allows you to assign object properties or array items as variables. This can greatly reduce the lines of code necessary to manipulate data in these structures. There are two types of destructuring: Object destructuring and Array destructuring.<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-object-destructuring\" class=\"anchor\" aria-hidden=\"true\" href=\"#object-destructuring\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Object Destructuring<\/h3>\n<p dir=\"auto\">Object destructuring allows you to create new <a href=\"https://www.digitalocean.com/community/tutorials/understanding-variables-scope-hoisting-in-javascript#understanding-variables\" rel=\"nofollow\">variables<\/a> using an object property as the value.<\/p>\n<p dir=\"auto\">Consider this example, an object that represents a note with an <code>id<\/code>, <code>title<\/code>, and <code>date<\/code>:<\/p>\n<p dir=\"auto\">Traditionally, if you wanted to create a new variable for each property, you would have to assign each variable individually, with a lot of repetition:<\/p>\n<p dir=\"auto\">With object destructuring, this can all be done in one line. By surrounding each variable in curly brackets <code>{}<\/code>, JavaScript will create new variables from each property with the same name:<\/p>\n<p dir=\"auto\">Now, <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-developer-console#working-in-the-console\" rel=\"nofollow\"><code>console.log()<\/code><\/a> the new variables:<\/p>\n<p dir=\"auto\">You will get the original property values as output:<\/p>\n<pre><code>Output1\nMy first note\n01/01/1970\n<\/code><\/pre>\n<p dir=\"auto\"><strong>Note:<\/strong> Destructuring an object does not modify the original object. You could still call the original <code>note<\/code> with all its entries intact.<\/p>\n<p dir=\"auto\">The default assignment for object destructuring creates new variables with the same name as the object property. If you do not want the new variable to have the same name as the property name, you also have the option of renaming the new variable by using a colon (<code>:<\/code>) to decide a new name, as seen with <code>noteId<\/code> in the following:<\/p>\n<p dir=\"auto\">Log the new variable <code>noteId<\/code> to the console:<\/p>\n<p dir=\"auto\">You will receive the following output:<\/p>\n<pre><code>Output1\n<\/code><\/pre>\n<p dir=\"auto\">You can also destructure nested object values. For example, update the <code>note<\/code> object to have a nested <code>author<\/code> object:<\/p>\n<p dir=\"auto\">Now you can destructure <code>note<\/code>, then destructure once again to create variables from the <code>author<\/code> properties:<\/p>\n<p dir=\"auto\">Next, log the new variables <code>firstName<\/code> and <code>lastName<\/code> using <a href=\"https://www.digitalocean.com/community/tutorials/how-to-work-with-strings-in-javascript#string-concatenation\" rel=\"nofollow\">template literals<\/a>:<\/p>\n<p dir=\"auto\">This will give the following output:<\/p>\n<pre><code>OutputSherlock Holmes\n<\/code><\/pre>\n<p dir=\"auto\">Note that in this example, though you have access to the contents of the <code>author<\/code> object, the <code>author<\/code> object itself is not accessible. In order to access an object as well as its nested values, you would have to declare them separately:<\/p>\n<p dir=\"auto\">This code will output the <code>author<\/code> object:<\/p>\n<pre><code>Output{firstName: \"Sherlock\", lastName: \"Holmes\"}\n<\/code><\/pre>\n<p dir=\"auto\">Destructuring an object is not only useful for reducing the amount of code that you have to write; it also allows you to target your access to the properties you care about.<\/p>\n<p dir=\"auto\">Finally, destructuring can be used to access the object properties of primitive values. For example, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"nofollow\">String<\/a> is a global object for strings, and has a <code>length<\/code> property:<\/p>\n<p dir=\"auto\">This will find the inherent length property of a string and set it equal to the <code>length<\/code> variable. Log <code>length<\/code> to see if this worked:<\/p>\n<p dir=\"auto\">You will get the following output:<\/p>\n<pre><code>Output8\n<\/code><\/pre>\n<p dir=\"auto\">The string <code>A string<\/code> was implicitly converted into an object here to retrieve the <code>length<\/code> property.<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-array-destructuring\" class=\"anchor\" aria-hidden=\"true\" href=\"#array-destructuring\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Array Destructuring<\/h3>\n<p dir=\"auto\">Array destructuring allows you to create new variables using an array item as a value. Consider this example, an array with the various parts of a date:<\/p>\n<p dir=\"auto\">Arrays in JavaScript are guaranteed to preserve their order, so in this case the first index will always be a year, the second will be the month, and so on. Knowing this, you can create variables from the items in the array:<\/p>\n<p dir=\"auto\">But doing this manually can take up a lot of space in your code. With array destructuring, you can unpack the values from the array in order and assign them to their own variables, like so:<\/p>\n<p dir=\"auto\">Now log the new variables:<\/p>\n<p dir=\"auto\">You will get the following output:<\/p>\n<pre><code>Output1970\n12\n01\n<\/code><\/pre>\n<p dir=\"auto\">Values can be skipped by leaving the destructuring syntax blank between commas:<\/p>\n<p dir=\"auto\">Running this will give the value of <code>year<\/code> and <code>day<\/code>:<\/p>\n<pre><code>Output1970\n01\n<\/code><\/pre>\n<p dir=\"auto\">Nested arrays can also be destructured. First, create a nested array:<\/p>\n<p dir=\"auto\">Then destructure that array and log the new variables:<\/p>\n<p dir=\"auto\">You will receive the following output:<\/p>\n<pre><code>Output1 2 3 4 5\n<\/code><\/pre>\n<p dir=\"auto\">Destructuring syntax can be applied to destructure the parameters in a function. To test this out, you will destructure the <code>keys<\/code> and <code>values<\/code> out of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\" rel=\"nofollow\"><code>Object.entries()<\/code><\/a>.<\/p>\n<p dir=\"auto\">First, declare the <code>note<\/code> object:<\/p>\n<p dir=\"auto\">Given this object, you could list the key-value pairs by destructuring arguments as they are passed to the <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods#foreach()\" rel=\"nofollow\"><code>forEach()<\/code> method<\/a>:<\/p>\n<p dir=\"auto\">Or you could accomplish the same thing using a <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-for-loops-in-javascript\" rel=\"nofollow\"><code>for<\/code> loop<\/a>:<\/p>\n<p dir=\"auto\">Either way, you will receive the following:<\/p>\n<pre><code>Outputid: 1\ntitle: My first note\ndate: 01/01/1970\n<\/code><\/pre>\n<p dir=\"auto\">Object destructuring and array destructuring can be combined in a single destructuring assignment. <a href=\"https://www.digitalocean.com/community/tutorials/understanding-default-parameters-in-javascript\" rel=\"nofollow\">Default parameters<\/a> can also be used with destructuring, as seen in this example that sets the default date to <a href=\"https://www.digitalocean.com/community/tutorials/understanding-date-and-time-in-javascript#the-date-object\" rel=\"nofollow\"><code>new Date()<\/code><\/a>.<\/p>\n<p dir=\"auto\">First, declare the <code>note<\/code> object:<\/p>\n<p dir=\"auto\">Then destructure the object, while also setting a new <code>date<\/code> variable with the default of <code>new Date()<\/code>:<\/p>\n<p dir=\"auto\"><code>console.log(date)<\/code> will then give output similar to the following:<\/p>\n<pre><code>OutputFri May 08 2020 23:53:49 GMT-0500 (Central Daylight Time)\n<\/code><\/pre>\n<p dir=\"auto\">As shown in this section, the destructuring assignment syntax adds a lot of flexibility to JavaScript and allows you to write more succinct code. In the next section, you will see how spread syntax can be used to expand data structures into their constituent data entries.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-spread\" class=\"anchor\" aria-hidden=\"true\" href=\"#spread\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Spread<\/h2>\n<p dir=\"auto\"><em>Spread<\/em> syntax (<code>...<\/code>) is another helpful addition to JavaScript for working with arrays, objects, and function calls. Spread allows objects and iterables (such as arrays) to be unpacked, or expanded, which can be used to make shallow copies of data structures to increase the ease of data manipulation.<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-spread-with-arrays\" class=\"anchor\" aria-hidden=\"true\" href=\"#spread-with-arrays\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Spread with Arrays<\/h3>\n<p dir=\"auto\">Spread can simplify common tasks with arrays. For example, let’s say you have two arrays and want to combine them:<\/p>\n<p dir=\"auto\">Originally you would use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"nofollow\"><code>concat()<\/code><\/a> to concatenate the two arrays:<\/p>\n<p dir=\"auto\">Now you can also use spread to unpack the arrays into a new array:<\/p>\n<p dir=\"auto\">Running this would give the following:<\/p>\n<pre><code>Output[\"hammer\", \"screwdriver\", \"wrench\", \"saw\"]\n<\/code><\/pre>\n<p dir=\"auto\">This can be particularly helpful with immutability. For example, you might be working with an app that has <code>users<\/code> stored in an array of objects:<\/p>\n<p dir=\"auto\">You could use <code>push<\/code> to modify the existing array and add a new user, which would be the mutable option:<\/p>\n<p dir=\"auto\">But this changes the <code>user<\/code> array, which we might want to preserve.<\/p>\n<p dir=\"auto\">Spread allows you to create a new array from the existing one and add a new item to the end:<\/p>\n<p dir=\"auto\">Now the new array, <code>updatedUsers<\/code>, has the new user, but the original <code>users<\/code> array remains unchanged:<\/p>\n<pre><code>Output[{id: 1, name: \"Ben\"}\n {id: 2, name: \"Leslie\"}]\n\n[{id: 1, name: \"Ben\"}\n {id: 2, name: \"Leslie\"}\n {id: 3, name: \"Ron\"}]\n<\/code><\/pre>\n<p dir=\"auto\">Creating copies of data instead of changing existing data can help prevent unexpected changes. In JavaScript, when you create an object or array and assign it to another variable, you are not actually creating a new object—you are passing a reference.<\/p>\n<p dir=\"auto\">Take this example, in which an array is created and assigned to another variable:<\/p>\n<p dir=\"auto\">Removing the last item of the second Array will modify the first one:<\/p>\n<p dir=\"auto\">This will give the output:<\/p>\n<pre><code>Output[\"one\", \"two\"]\n<\/code><\/pre>\n<p dir=\"auto\">Spread allows you to make a shallow copy of an array or object, meaning that any top level properties will be cloned, but nested objects will still be passed by reference. For simple arrays or objects, a shallow copy may be all you need.<\/p>\n<p dir=\"auto\">If you write the same example code but copy the array with spread, the original array will no longer be modified:<\/p>\n<p dir=\"auto\">The following will be logged to the console:<\/p>\n<pre><code>Output[\"one\", \"two\", \"three\"]\n<\/code><\/pre>\n<p dir=\"auto\">Spread can also be used to convert a <a href=\"https://www.digitalocean.com/community/tutorials/understanding-map-and-set-objects-in-javascript\" rel=\"nofollow\">set<\/a>, or any other <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#Iterable_examples\" rel=\"nofollow\">iterable<\/a> to an Array.<\/p>\n<p dir=\"auto\">Create a new set and add some entries to it:<\/p>\n<p dir=\"auto\">Next, use the spread operator with <code>set<\/code> and log the results:<\/p>\n<p dir=\"auto\">This will give the following:<\/p>\n<pre><code>Output[\"octopus\", \"starfish\", \"whale\"]\n<\/code><\/pre>\n<p dir=\"auto\">This can also be useful for creating an array from a string:<\/p>\n<p dir=\"auto\">This will give an array with each character as an item in the array:<\/p>\n<pre><code>Output[\"h\", \"e\", \"l\", \"l\", \"o\"]\n<\/code><\/pre>\n<h3 dir=\"auto\"><a id=\"user-content-spread-with-objects\" class=\"anchor\" aria-hidden=\"true\" href=\"#spread-with-objects\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Spread with Objects<\/h3>\n<p dir=\"auto\">When working with objects, spread can be used to copy and update objects.<\/p>\n<p dir=\"auto\">Originally, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"nofollow\"><code>Object.assign()<\/code><\/a> was used to copy an object:<\/p>\n<p dir=\"auto\">The <code>secondObject<\/code> will now be a clone of the <code>originalObject<\/code>.<\/p>\n<p dir=\"auto\">This is simplified with the spread syntax—you can shallow copy an object by spreading it into a new one:<\/p>\n<p dir=\"auto\">This will result in the following:<\/p>\n<pre><code>Output{enabled: true, darkMode: false}\n<\/code><\/pre>\n<p dir=\"auto\">Just like with arrays, this will only create a shallow copy, and nested objects will still be passed by reference.<\/p>\n<p dir=\"auto\">Adding or modifying properties on an existing object in an immutable fashion is simplified with spread. In this example, the <code>isLoggedIn<\/code> property is added to the <code>user<\/code> object:<\/p>\n<p dir=\"auto\">THis will output the following:<\/p>\n<pre><code>Output{id: 3, name: \"Ron\", isLoggedIn: true}\n<\/code><\/pre>\n<p dir=\"auto\">One important thing to note with updating objects via spread is that any nested object will have to be spread as well. For example, let’s say that in the <code>user<\/code> object there is a nested <code>organization<\/code> object:<\/p>\n<p dir=\"auto\">If you tried to add a new item to <code>organization<\/code>, it would overwrite the existing fields:<\/p>\n<p dir=\"auto\">This would result in the following:<\/p>\n<pre><code>Outputid: 3\nname: \"Ron\"\norganization: {position: \"Director\"}\n<\/code><\/pre>\n<p dir=\"auto\">If mutability is not an issue, the field could be updated directly:<\/p>\n<p dir=\"auto\">But since we are seeking an immutable solution, we can spread the inner object to retain the existing properties:<\/p>\n<p dir=\"auto\">This will give the following:<\/p>\n<pre><code>Outputid: 3\nname: \"Ron\"\norganization: {name: \"Parks &amp; Recreation\", city: \"Pawnee\", position: \"Director\"}\n<\/code><\/pre>\n<h3 dir=\"auto\"><a id=\"user-content-spread-with-function-calls\" class=\"anchor\" aria-hidden=\"true\" href=\"#spread-with-function-calls\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Spread with Function Calls<\/h3>\n<p dir=\"auto\">Spread can also be used with arguments in function calls.<\/p>\n<p dir=\"auto\">As an example, here is a <code>multiply<\/code> function that takes three parameters and multiplies them:<\/p>\n<p dir=\"auto\">Normally, you would pass three values individually as arguments to the function call, like so:<\/p>\n<p dir=\"auto\">This would give the following:<\/p>\n<pre><code>Output6\n<\/code><\/pre>\n<p dir=\"auto\">However, if all the values you want to pass to the function already exist in an array, the spread syntax allows you to use each item in an array as an argument:<\/p>\n<p dir=\"auto\">This will give the same result:<\/p>\n<pre><code>Output6\n<\/code><\/pre>\n<p dir=\"auto\"><strong>Note:<\/strong> Without spread, this can be accomplished by using <code>apply()<\/code>:<\/p>\n<p dir=\"auto\">This will give:<\/p>\n<pre><code>Output6\n<\/code><\/pre>\n<p dir=\"auto\">Now that you have seen how spread can shorten your code, you can take a look at a different use of the <code>...<\/code> syntax: rest parameters.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-rest-parameters\" class=\"anchor\" aria-hidden=\"true\" href=\"#rest-parameters\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Rest Parameters<\/h2>\n<p dir=\"auto\">The last feature you will learn in this article is the <em>rest parameter<\/em> syntax. The syntax appears the same as spread (<code>...<\/code>) but has the opposite effect. Instead of unpacking an array or object into individual values, the rest syntax will create an array of an indefinite number of arguments.<\/p>\n<p dir=\"auto\">In the function <code>restTest<\/code> for example, if we wanted <code>args<\/code> to be an array composed of an indefinite number of arguments, we could have the following:<\/p>\n<p dir=\"auto\">All the arguments passed to the <code>restTest<\/code> function are now available in the <code>args<\/code> array:<\/p>\n<pre><code>Output[1, 2, 3, 4, 5, 6]\n<\/code><\/pre>\n<p dir=\"auto\">Rest syntax can be used as the only parameter or as the last parameter in the list. If used as the only parameter, it will gather all arguments, but if it’s at the end of a list, it will gather every argument that is remaining, as seen in this example:<\/p>\n<p dir=\"auto\">This will take the first two arguments individually, then group the rest into an array:<\/p>\n<pre><code>Output1\n2\n[3, 4, 5, 6]\n<\/code><\/pre>\n<p dir=\"auto\">In older code, the <code>arguments<\/code> variable could be used to gather all the arguments passed through to a function:<\/p>\n<p dir=\"auto\">This would give the following output:<\/p>\n<pre><code>Output1Arguments(3) [\"how\", \"many\", \"arguments\"]\n<\/code><\/pre>\n<p dir=\"auto\">However, this has a few disadvantages. First, the <code>arguments<\/code> variable cannot be used with arrow functions.<\/p>\n<p dir=\"auto\">This would yield an error:<\/p>\n<pre><code>OutputUncaught ReferenceError: arguments is not defined\n<\/code><\/pre>\n<p dir=\"auto\">Additionally, <code>arguments<\/code> is not a true array and cannot use methods like <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods#map()\" rel=\"nofollow\"><code>map<\/code> and <code>filter<\/code><\/a> without first being converted to an array. It also will collect all arguments passed instead of just the rest of the arguments, as seen in the <code>restTest(one, two, ...args)<\/code> example.<\/p>\n<p dir=\"auto\">Rest can be used when destructuring arrays as well:<\/p>\n<p dir=\"auto\">This will give:<\/p>\n<pre><code>Outputhammer\n[\"screwdriver\", \"wrench\"]\n<\/code><\/pre>\n<p dir=\"auto\">Rest can also be used when destructuring objects:<\/p>\n<p dir=\"auto\">Giving the following output:<\/p>\n<pre><code>Outputtrue\n{id: 1, name: \"Ben\"}\n<\/code><\/pre>\n<p dir=\"auto\">In this way, rest syntax provides efficient methods for gathering an indeterminate amount of items.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-conclusion\" class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Conclusion<\/h2>\n<p dir=\"auto\">In this article, you learned about destructuring, spread syntax, and rest parameters. In summary:<\/p>\n<ul dir=\"auto\">\n<li>Destructuring is used to create varibles from array items or object properties.<\/li>\n<li>Spread syntax is used to unpack iterables such as arrays, objects, and function calls.<\/li>\n<li>Rest parameter syntax will create an array from an indefinite number of values.<\/li>\n<\/ul>\n<p dir=\"auto\">Destructuring, rest parameters, and spread syntax are useful features in JavaScript that help keep your code succinct and clean.<\/p>\n<p dir=\"auto\">If you would like to see destructuring in action, take a look at <a href=\"https://www.digitalocean.com/community/tutorials/how-to-customize-react-components-with-props#step-2-%E2%80%94-building-dynamic-components-with-props\" rel=\"nofollow\">How To Customize React Components with Props<\/a>, which uses this syntax to destructure data and pass it to custom front-end components. If you’d like to learn more about JavaScript, return to our <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-javascript\" rel=\"nofollow\">How To Code in JavaScript series page<\/a>.<\/p>\n<\/article>\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45/raw/4f00bac8747a9543aa1f251d228c09fd8e796183/Understanding%20Destructuring,%20Rest%20Parameters,%20and%20Spread%20Syntax%20in%20JavaScript%20%20DigitalOcean.md\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45#file-understanding-destructuring-rest-parameters-and-spread-syntax-in-javascript-digitalocean-md\">\n          Understanding Destructuring, Rest Parameters, and Spread Syntax in JavaScript  DigitalOcean.md\n        <\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-understanding-generators-in-javascript-digitalocean-md\" class=\"file my-2\">\n      <div id=\"file-understanding-generators-in-javascript-digitalocean-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p dir=\"auto\"><em>The author selected the <a href=\"https://www.brightfunds.org/funds/open-internet-free-speech\" rel=\"nofollow\">Open Internet/Free Speech Fund<\/a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\" rel=\"nofollow\">Write for DOnations<\/a> program.<\/em><\/p>\n<h3 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Introduction<\/h3>\n<p dir=\"auto\">In <a href=\"http://www.ecma-international.org/ecma-262/6.0/\" rel=\"nofollow\">ECMAScript 2015<\/a>, generators were introduced to the JavaScript language. A <em>generator<\/em> is a process that can be paused and resumed and can yield multiple values. A generator in JavaScript consists of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"nofollow\">generator function<\/a>, which returns an iterable <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\" rel=\"nofollow\"><code>Generator<\/code><\/a> object.<\/p>\n<p dir=\"auto\">Generators can maintain state, providing an efficient way to make iterators, and are capable of dealing with infinite data streams, which can be used to implement infinite scroll on the frontend of a web application, to operate on sound wave data, and more. Additionally, when used with <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-asynchronous-code-in-node-js#using-promises-for-concise-asynchronous-programming\" rel=\"nofollow\">Promises<\/a>, generators can mimic the <code>async/await<\/code> functionality, which allows us to deal with <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-asynchronous-code-in-node-js\" rel=\"nofollow\">asynchronous code<\/a> in a more straightforward and readable manner. Although <code>async/await<\/code> is a more prevalent way to deal with common, simple asynchronous use cases, like fetching data from an API, generators have more advanced features that make learning how to use them worthwhile.<\/p>\n<p dir=\"auto\">In this article, we’ll cover how to create generator functions, how to iterate over <code>Generator<\/code> objects, the difference between <code>yield<\/code> and <code>return<\/code> inside a generator, and other aspects of working with generators.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-generator-functions\" class=\"anchor\" aria-hidden=\"true\" href=\"#generator-functions\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Generator Functions<\/h2>\n<p dir=\"auto\">A <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"nofollow\">generator function<\/a> is a function that returns a <code>Generator<\/code> object, and is defined by the <code>function<\/code> keyword followed by an asterisk (<code>*<\/code>), as shown in the following:<\/p>\n<p dir=\"auto\">Occasionally, you will see the asterisk next to the function name, as opposed to the function keyword, such as <code>function *generatorFunction()<\/code>. This works the same, but <code>function*<\/code> is a more widely accepted syntax.<\/p>\n<p dir=\"auto\">Generator functions can also be defined in an expression, like regular <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-javascript\" rel=\"nofollow\">functions<\/a>:<\/p>\n<p dir=\"auto\">Generators can even be the methods of an <a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\" rel=\"nofollow\">object<\/a> or <a href=\"https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript\" rel=\"nofollow\">class<\/a>:<\/p>\n<p dir=\"auto\">The examples throughout this article will use the generator function declaration syntax.<\/p>\n<p dir=\"auto\"><strong>Note<\/strong>: Unlike regular functions, generators cannot be constructed with the <code>new<\/code> keyword, nor can they be used in conjunction with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"nofollow\">arrow functions<\/a>.<\/p>\n<p dir=\"auto\">Now that you know how to declare generator functions, lets look at the iterable <code>Generator<\/code> objects that they return.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-generator-objects\" class=\"anchor\" aria-hidden=\"true\" href=\"#generator-objects\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Generator Objects<\/h2>\n<p dir=\"auto\">Traditionally, functions in JavaScript run to completion, and calling a function will return a value when it arrives at the <code>return<\/code> keyword. If the <code>return<\/code> keyword is omitted, a function will implicitly return <code>undefined<\/code>.<\/p>\n<p dir=\"auto\">In the following code, for example, we declare a <code>sum()<\/code> function that returns a value that is the sum of two integer arguments:<\/p>\n<p dir=\"auto\">Calling the function returns a value that is the sum of the arguments:<\/p>\n<p dir=\"auto\">A generator function, however, does not return a value immediately, and instead returns an iterable <code>Generator<\/code> object. In the following example, we declare a function and give it a single return value, like a standard function:<\/p>\n<p dir=\"auto\">When we invoke the generator function, it will return the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\" rel=\"nofollow\"><code>Generator<\/code><\/a> object, which we can assign to a variable:<\/p>\n<p dir=\"auto\">If this were a regular function, we would expect <code>generator<\/code> to give us the string returned in the function. However, what we actually get is an object in a <code>suspended<\/code> state. Calling <code>generator<\/code> will therefore give output similar to the following:<\/p>\n<pre><code>OutputgeneratorFunction {&lt;suspended&gt;}\n  __proto__: Generator\n  [[GeneratorLocation]]: VM272:1\n  [[GeneratorStatus]]: \"suspended\"\n  [[GeneratorFunction]]: ƒ* generatorFunction()\n  [[GeneratorReceiver]]: Window\n  [[Scopes]]: Scopes[3]\n<\/code><\/pre>\n<p dir=\"auto\">The <code>Generator<\/code> object returned by the function is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\" rel=\"nofollow\">iterator<\/a>. An <em>iterator<\/em> is an object that has a <code>next()<\/code> method available, which is used for iterating through a sequence of values. The <code>next()<\/code> method returns an object with <code>value<\/code> and <code>done<\/code> properties. <code>value<\/code> represent the returned value, and <code>done<\/code> indicates whether the iterator has run through all its values or not.<\/p>\n<p dir=\"auto\">Knowing this, let’s call <code>next()<\/code> on our <code>generator<\/code> and get the current value and state of the iterator:<\/p>\n<p dir=\"auto\">This will give the following output:<\/p>\n<pre><code>Output{value: \"Hello, Generator!\", done: true}\n<\/code><\/pre>\n<p dir=\"auto\">The value returned from calling <code>next()<\/code> is <code>Hello, Generator!<\/code>, and the state of <code>done<\/code> is <code>true<\/code>, because this value came from a <code>return<\/code> that closed out the iterator. Since the iterator is done, the generator function’s status will change from <code>suspended<\/code> to <code>closed<\/code>. Calling <code>generator<\/code> again will give the following:<\/p>\n<pre><code>OutputgeneratorFunction {&lt;closed&gt;}\n<\/code><\/pre>\n<p dir=\"auto\">As of right now, we’ve only demonstrated how a generator function can be a more complex way to get the <code>return<\/code> value of a function. But generator functions also have unique features that distinguish them from normal functions. In the next section, we’ll learn about the <code>yield<\/code> operator and see how a generator can pause and resume execution.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-yield-operators\" class=\"anchor\" aria-hidden=\"true\" href=\"#yield-operators\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a><code>yield<\/code> Operators<\/h2>\n<p dir=\"auto\">Generators introduce a new keyword to JavaScript: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\" rel=\"nofollow\"><code>yield<\/code><\/a>. <code>yield<\/code> can pause a generator function and return the value that follows <code>yield<\/code>, providing a lightweight way to iterate through values.<\/p>\n<p dir=\"auto\">In this example, we’ll pause the generator function three times with different values, and return a value at the end. Then we will assign our <code>Generator<\/code> object to the <code>generator<\/code> variable.<\/p>\n<p dir=\"auto\">Now, when we call <code>next()<\/code> on the generator function, it will pause every time it encounters <code>yield<\/code>. <code>done<\/code> will be set to <code>false<\/code> after each <code>yield<\/code>, indicating that the generator has not finished. Once it encounters a <code>return<\/code>, or there are no more <code>yield<\/code>s encountered in the function, <code>done<\/code> will flip to <code>true<\/code>, and the generator will be finished.<\/p>\n<p dir=\"auto\">Use the <code>next()<\/code> method four times in a row:<\/p>\n<p dir=\"auto\">These will give the following four lines of output in order:<\/p>\n<pre><code>Output{value: \"Neo\", done: false}\n{value: \"Morpheus\", done: false}\n{value: \"Trinity\", done: false}\n{value: \"The Oracle\", done: true}\n<\/code><\/pre>\n<p dir=\"auto\">Note that a generator does not require a <code>return<\/code>; if omitted, the last iteration will return <code>{value: undefined, done: true}<\/code>, as will any subsequent calls to <code>next()<\/code> after a generator has completed.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-iterating-over-a-generator\" class=\"anchor\" aria-hidden=\"true\" href=\"#iterating-over-a-generator\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Iterating Over a Generator<\/h2>\n<p dir=\"auto\">Using the <code>next()<\/code> method, we manually iterated through the <code>Generator<\/code> object, receiving all the <code>value<\/code> and <code>done<\/code> properties of the full object. However, just like <a href=\"https://www.digitalocean.com/community/tutorials/understanding-arrays-in-javascript\" rel=\"nofollow\"><code>Array<\/code><\/a>, <a href=\"https://www.digitalocean.com/community/tutorials/understanding-map-and-set-objects-in-javascript\" rel=\"nofollow\"><code>Map<\/code>, and <code>Set<\/code><\/a>, a <code>Generator<\/code> follows the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"nofollow\">iteration protocol<\/a>, and can be iterated through with <a href=\"https://www.digitalocean.com/community/tutorials/how-to-construct-for-loops-in-javascript#for%E2%80%A6of-loop\" rel=\"nofollow\"><code>for...of<\/code><\/a>:<\/p>\n<p dir=\"auto\">This will return the following:<\/p>\n<pre><code>OutputNeo\nMorpheus\nTrinity\n<\/code><\/pre>\n<p dir=\"auto\">The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"nofollow\">spread operator<\/a> can also be used to assign the values of a <code>Generator<\/code> to an array.<\/p>\n<p dir=\"auto\">This will give the following array:<\/p>\n<pre><code>Output(3) [\"Neo\", \"Morpheus\", \"Trinity\"]\n<\/code><\/pre>\n<p dir=\"auto\">Both spread and <code>for...of<\/code> will not factor the <code>return<\/code> into the values (in this case, it would have been <code>\'The Oracle\'<\/code>).<\/p>\n<p dir=\"auto\"><strong>Note<\/strong>: While both of these methods are effective for working with finite generators, if a generator is dealing with an infinite data stream, it won’t be possible to use spread or <code>for...of<\/code> directly without creating an infinite loop.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-closing-a-generator\" class=\"anchor\" aria-hidden=\"true\" href=\"#closing-a-generator\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Closing a Generator<\/h2>\n<p dir=\"auto\">As we’ve seen, a generator can have its <code>done<\/code> property set to <code>true<\/code> and its status set to <code>closed<\/code> by iterating through all its values. There are two additional ways to immediately cancel a generator: with the <code>return()<\/code> method, and with the <code>throw()<\/code> method.<\/p>\n<p dir=\"auto\">With <code>return()<\/code>, the generator can be terminated at any point, just as if a <code>return<\/code> statement had been in the function body. You can pass an argument into <code>return()<\/code>, or leave it blank for an undefined value.<\/p>\n<p dir=\"auto\">To demonstrate <code>return()<\/code>, we’ll create a generator with a few <code>yield<\/code> values but no <code>return<\/code> in the function definition:<\/p>\n<p dir=\"auto\">The first <code>next()<\/code> will give us <code>\'Neo\'<\/code>, with <code>done<\/code> set to <code>false<\/code>. If we invoke a <code>return()<\/code> method on the <code>Generator<\/code> object right after that, we’ll now get the passed value and <code>done<\/code> set to <code>true<\/code>. Any additional call to <code>next()<\/code> will give the default completed generator response with an undefined value.<\/p>\n<p dir=\"auto\">To demonstrate this, run the following three methods on <code>generator<\/code>:<\/p>\n<p dir=\"auto\">This will give the three following results:<\/p>\n<pre><code>Output{value: \"Neo\", done: false}\n{value: \"There is no spoon!\", done: true}\n{value: undefined, done: true}\n<\/code><\/pre>\n<p dir=\"auto\">The <code>return()<\/code> method forced the <code>Generator<\/code> object to complete and to ignore any other <code>yield<\/code> keywords. This is particularly useful in asynchronous programming when you need to make functions cancelable, such as interrupting a web request when a user wants to perform a different action, as it is not possible to directly cancel a Promise.<\/p>\n<p dir=\"auto\">If the body of a generator function has a way to catch and deal with errors, you can use the <code>throw()<\/code> method to throw an error into the generator. This starts up the generator, throws the error in, and terminates the generator.<\/p>\n<p dir=\"auto\">To demonstrate this, we will put a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\" rel=\"nofollow\"><code>try...catch<\/code><\/a> inside the generator function body and log an error if one is found:<\/p>\n<p dir=\"auto\">Now, we will run the <code>next()<\/code> method, followed by <code>throw()<\/code>:<\/p>\n<p dir=\"auto\">This will give the following output:<\/p>\n<pre><code>Output{value: \"Neo\", done: false}\nError: Agent Smith!\n{value: undefined, done: true}\n<\/code><\/pre>\n<p dir=\"auto\">Using <code>throw()<\/code>, we injected an error into the generator, which was caught by the <code>try...catch<\/code> and logged to the console.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-generator-object-methods-and-states\" class=\"anchor\" aria-hidden=\"true\" href=\"#generator-object-methods-and-states\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Generator Object Methods and States<\/h2>\n<p dir=\"auto\">The following table shows a list of methods that can be used on <code>Generator<\/code> objects:<\/p>\n<p dir=\"auto\">Method<\/p>\n<p dir=\"auto\">Description<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next\" rel=\"nofollow\"><code>next()<\/code><\/a><\/p>\n<p dir=\"auto\">Returns the next value in a generator<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return\" rel=\"nofollow\"><code>return()<\/code><\/a><\/p>\n<p dir=\"auto\">Returns a value in a generator and finishes the generator<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw\" rel=\"nofollow\"><code>throw()<\/code><\/a><\/p>\n<p dir=\"auto\">Throws an error and finishes the generator<\/p>\n<p dir=\"auto\">The next table lists the possible states of a <code>Generator<\/code> object:<\/p>\n<p dir=\"auto\">Status<\/p>\n<p dir=\"auto\">Description<\/p>\n<p dir=\"auto\"><code>suspended<\/code><\/p>\n<p dir=\"auto\">Generator has halted execution but has not terminated<\/p>\n<p dir=\"auto\"><code>closed<\/code><\/p>\n<p dir=\"auto\">Generator has terminated by either encountering an error, returning, or iterating through all values<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-yield-delegation\" class=\"anchor\" aria-hidden=\"true\" href=\"#yield-delegation\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a><code>yield<\/code> Delegation<\/h2>\n<p dir=\"auto\">In addition to the regular <code>yield<\/code> operator, generators can also use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*\" rel=\"nofollow\"><code>yield*<\/code><\/a> expression to delegate further values to another generator. When the <code>yield*<\/code> is encountered within a generator, it will go inside the delegated generator and begin iterating through all the <code>yield<\/code>s until that generator is closed. This can be used to separate different generator functions to semantically organize your code, while still having all their <code>yield<\/code>s be iterable in the right order.<\/p>\n<p dir=\"auto\">To demonstrate, we can create two generator functions, one of which will <code>yield*<\/code> operate on the other:<\/p>\n<p dir=\"auto\">Next, let’s iterate through the <code>begin()<\/code> generator function:<\/p>\n<p dir=\"auto\">This will give the following values in the order they are generated:<\/p>\n<pre><code>Output1\n2\n3\n4\n<\/code><\/pre>\n<p dir=\"auto\">The outer generator yielded the values <code>1<\/code> and <code>2<\/code>, then delegated to the other generator with <code>yield*<\/code>, which returned <code>3<\/code> and <code>4<\/code>.<\/p>\n<p dir=\"auto\"><code>yield*<\/code> can also delegate to any object that is iterable, such as an Array or a Map. Yield delegation can be helpful in organizing code, since any function within a generator that wanted to use <code>yield<\/code> would also have to be a generator.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-infinite-data-streams\" class=\"anchor\" aria-hidden=\"true\" href=\"#infinite-data-streams\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Infinite Data Streams<\/h2>\n<p dir=\"auto\">One of the useful aspects of generators is the ability to work with infinite data streams and collections. This can be demonstrated by creating an infinite loop inside a generator function that increments a number by one.<\/p>\n<p dir=\"auto\">In the following code block, we define this generator function and then initiate the generator:<\/p>\n<p dir=\"auto\">Now, iterate through the values using <code>next()<\/code>:<\/p>\n<p dir=\"auto\">This will give the following output:<\/p>\n<pre><code>Output{value: 0, done: false}\n{value: 1, done: false}\n{value: 2, done: false}\n{value: 3, done: false}\n<\/code><\/pre>\n<p dir=\"auto\">The function returns successive values in the infinite loop while the <code>done<\/code> property remains <code>false<\/code>, ensuring that it will not finish.<\/p>\n<p dir=\"auto\">With generators, you don’t have to worry about creating an infinite loop, because you can halt and resume execution at will. However, you still have to have caution with how you invoke the generator. If you use spread or <code>for...of<\/code> on an infinite data stream, you will still be iterating over an infinite loop all at once, which will cause the environment to crash.<\/p>\n<p dir=\"auto\">For a more complex example of an infinite data stream, we can create a Fibonacci generator function. The Fibonacci sequence, which continuously adds the two previous values together, can be written using an infinite loop within a generator as follows:<\/p>\n<p dir=\"auto\">To test this out, we can loop through a finite number and print the Fibonacci sequence to the console.<\/p>\n<p dir=\"auto\">This will give the following:<\/p>\n<pre><code>Output0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n<\/code><\/pre>\n<p dir=\"auto\">The ability to work with infinite data sets is one part of what makes generators so powerful. This can be useful for examples like implementing infinite scroll on the frontend of a web application.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-passing-values-in-generators\" class=\"anchor\" aria-hidden=\"true\" href=\"#passing-values-in-generators\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Passing Values in Generators<\/h2>\n<p dir=\"auto\">Throughout this article, we’ve used generators as iterators, and we’ve yielded values in each iteration. In addition to producing values, generators can also consume values from <code>next()<\/code>. In this case, <code>yield<\/code> will contain a value.<\/p>\n<p dir=\"auto\">It’s important to note that the first <code>next()<\/code> that is called will not pass a value, but will only start the generator. To demonstrate this, we can log the value of <code>yield<\/code> and call <code>next()<\/code> a few times with some values.<\/p>\n<p dir=\"auto\">This will give the following output:<\/p>\n<pre><code>Output100\n200\n{value: \"The end\", done: true}\n<\/code><\/pre>\n<p dir=\"auto\">It is also possible to seed the generator with an initial value. In the following example, we’ll make a <code>for<\/code> loop and pass each value into the <code>next()<\/code> method, but pass an argument to the initial function as well:<\/p>\n<p dir=\"auto\">We’ll retrieve the value from <code>next()<\/code> and yield a new value to the next iteration, which is the previous value times ten. This will give the following:<\/p>\n<pre><code>Output0\n10\n20\n30\n40\n<\/code><\/pre>\n<p dir=\"auto\">Another way to deal with starting up a generator is to wrap the generator in a function that will always call <code>next()<\/code> once before doing anything else.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-asyncawait-with-generators\" class=\"anchor\" aria-hidden=\"true\" href=\"#asyncawait-with-generators\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a><code>async<\/code>/<code>await<\/code> with Generators<\/h2>\n<p dir=\"auto\">An <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-asynchronous-code-in-node-js\" rel=\"nofollow\">asynchronous function<\/a> is a type of function available in ES6+ JavaScript that makes working with asynchronous data easier to understand by making it appear synchronous. Generators have a more extensive array of capabilities than asynchronous functions, but are capable of replicating similar behavior. Implementing asynchronous programming in this way can increase the flexibility of your code.<\/p>\n<p dir=\"auto\">In this section, we will demonstrate an example of reproducing <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-asynchronous-code-in-node-js#writing-javascript-with-asyncawait\" rel=\"nofollow\"><code>async<\/code>/<code>await<\/code><\/a> with generators.<\/p>\n<p dir=\"auto\">Let’s build an asynchronous function that uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" rel=\"nofollow\">the Fetch API<\/a> to get data from the <a href=\"https://jsonplaceholder.typicode.com/\" rel=\"nofollow\">JSONPlaceholder API<\/a> (which provides example <a href=\"https://www.digitalocean.com/community/tutorials/how-to-work-with-json-in-javascript\" rel=\"nofollow\">JSON<\/a> data for testing purposes) and logs the response to the console.<\/p>\n<p dir=\"auto\">Start out by defining an asynchronous function called <code>getUsers<\/code> that fetches data from the API and returns an array of objects, then call <code>getUsers<\/code>:<\/p>\n<p dir=\"auto\">This will give JSON data similar to the following:<\/p>\n<pre><code>Output[ {id: 1, name: \"Leanne Graham\" ...},\n  {id: 2, name: \"Ervin Howell\" ...},\n  {id: 3, name\": \"Clementine Bauch\" ...}, \n  {id: 4, name: \"Patricia Lebsack\"...},\n  {id: 5, name: \"Chelsey Dietrich\"...},\n  ...]\n<\/code><\/pre>\n<p dir=\"auto\">Using generators, we can create something almost identical that does not use the <code>async<\/code>/<code>await<\/code> keywords. Instead, it will use a new function we create and <code>yield<\/code> values instead of <code>await<\/code> promises.<\/p>\n<p dir=\"auto\">In the following code block, we define a function called <code>getUsers<\/code> that uses our new <code>asyncAlt<\/code> function (which we will write later on) to mimic <code>async<\/code>/<code>await<\/code>.<\/p>\n<p dir=\"auto\">As we can see, it looks almost identical to the <code>async<\/code>/<code>await<\/code> implementation, except that there is a generator function being passed in that yields values.<\/p>\n<p dir=\"auto\">Now we can create an <code>asyncAlt<\/code> function that resembles an asynchronous function. <code>asyncAlt<\/code> has a generator function as a parameter, which is our function that yields the promises that <code>fetch<\/code> returns. <code>asyncAlt<\/code> returns a function itself, and resolves every promise it finds until the last one:<\/p>\n<p dir=\"auto\">This will give the same output as the <code>async<\/code>/<code>await<\/code> version:<\/p>\n<pre><code>Output[ {id: 1, name: \"Leanne Graham\" ...},\n  {id: 2, name: \"Ervin Howell\" ...},\n  {id: 3, name\": \"Clementine Bauch\" ...}, \n  {id: 4, name: \"Patricia Lebsack\"...},\n  {id: 5, name: \"Chelsey Dietrich\"...},\n  ...]\n<\/code><\/pre>\n<p dir=\"auto\">Note that this implementation is for demonstrating how generators can be used in place of <code>async<\/code>/<code>await<\/code>, and is not a production-ready design. It does not have error handling set up, nor does it have the ability to pass parameters into the yielded values. Though this method can add flexibility to your code, often <code>async/await<\/code> will be a better choice, since it abstracts implementation details away and lets you focus on writing productive code.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-conclusion\" class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Conclusion<\/h2>\n<p dir=\"auto\">Generators are processes that can halt and resume execution. They are a powerful, versatile feature of JavaScript, although they are not commonly used. In this tutorial, we learned about generator functions and generator objects, methods available to generators, the <code>yield<\/code> and <code>yield*<\/code> operators, and generators used with finite and infinite data sets. We also explored one way to implement asynchronous code without nested callbacks or long promise chains.<\/p>\n<p dir=\"auto\">If you would like to learn more about JavaScript syntax, take a look at our <a href=\"https://www.digitalocean.com/community/conceptual_articles/understanding-this-bind-call-and-apply-in-javascript\" rel=\"nofollow\">Understanding This, Bind, Call, and Apply in JavaScript<\/a> and <a href=\"https://www.digitalocean.com/community/tutorials/understanding-map-and-set-objects-in-javascript\" rel=\"nofollow\">Understanding Map and Set Objects in JavaScript<\/a> tutorials.<\/p>\n<\/article>\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45/raw/4f00bac8747a9543aa1f251d228c09fd8e796183/Understanding%20Generators%20in%20JavaScript%20%20DigitalOcean.md\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45#file-understanding-generators-in-javascript-digitalocean-md\">\n          Understanding Generators in JavaScript  DigitalOcean.md\n        <\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-understanding-map-and-set-objects-in-javascript-digitalocean-md\" class=\"file my-2\">\n      <div id=\"file-understanding-map-and-set-objects-in-javascript-digitalocean-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p dir=\"auto\"><em>The author selected the <a href=\"https://www.brightfunds.org/open-internet-free-speech\" rel=\"nofollow\">Open Internet/Free Speech Fund<\/a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\" rel=\"nofollow\">Write for DOnations<\/a> program.<\/em><\/p>\n<p dir=\"auto\">In JavaScript, developers often spend a lot of time deciding the correct data structure to use. This is because choosing the correct data structure can make it easier to manipulate that data later on, saving time and making code easier to comprehend. The two predominant data structures for storing collections of data are <a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\" rel=\"nofollow\">Objects<\/a> and <a href=\"https://www.digitalocean.com/community/tutorials/understanding-arrays-in-javascript\" rel=\"nofollow\">Arrays<\/a> (a type of object). Developers use Objects to store key/value pairs and Arrays to store indexed lists. However, to give developers more flexibility, the ECMAScript 2015 specification introduced two new types of iterable objects: <em>Maps<\/em>, which are ordered collections of key/value pairs, and <em>Sets<\/em>, which are collections of unique values.<\/p>\n<p dir=\"auto\">In this article, you will go over the Map and Set objects, what makes them similar or different to Objects and Arrays, the properties and methods available to them, and examples of some practical uses.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-maps\" class=\"anchor\" aria-hidden=\"true\" href=\"#maps\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Maps<\/h2>\n<p dir=\"auto\">A Map is a collection of key/value pairs that can use any <a href=\"https://www.digitalocean.com/community/tutorials/understanding-data-types-in-javascript\" rel=\"nofollow\">data type<\/a> as a key and can maintain the order of its entries. Maps have elements of both Objects (a unique key/value pair collection) and Arrays (an ordered collection), but are more similar to Objects conceptually. This is because, although the size and order of entries is preserved like an Array, the entries themselves are key/value pairs like Objects.<\/p>\n<p dir=\"auto\">Maps can be initialized with the <code>new Map()<\/code> syntax:<\/p>\n<p dir=\"auto\">This gives us an empty Map:<\/p>\n<pre><code>OutputMap(0) {}\n<\/code><\/pre>\n<h3 dir=\"auto\"><a id=\"user-content-adding-values-to-a-map\" class=\"anchor\" aria-hidden=\"true\" href=\"#adding-values-to-a-map\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Adding Values to a Map<\/h3>\n<p dir=\"auto\">You can add values to a map with the <code>set()<\/code> method. The first argument will be the key, and the second argument will be the value.<\/p>\n<p dir=\"auto\">The following adds three key/value pairs to <code>map<\/code>:<\/p>\n<p dir=\"auto\">Here we begin to see how Maps have elements of both Objects and Arrays. Like an Array, we have a zero-indexed collection, and we can also see how many items are in the Map by default. Maps use the <code>=&gt;<\/code> syntax to signify key/value pairs as <code>key =&gt; value<\/code>:<\/p>\n<pre><code>OutputMap(3)\n0: {\"firstName\" =&gt; \"Luke\"}\n1: {\"lastName\" =&gt; \"Skywalker\"}\n2: {\"occupation\" =&gt; \"Jedi Knight\"}\n<\/code><\/pre>\n<p dir=\"auto\">This example looks similar to a regular object with string-based keys, but we can use any data type as a key with Maps.<\/p>\n<p dir=\"auto\">In addition to manually setting values on a Map, we can also initialize a Map with values already. We do this using an Array of Arrays containing two elements that are each key/value pairs, which looks like this:<\/p>\n<p dir=\"auto\">Using the following syntax, we can recreate the same Map:<\/p>\n<p dir=\"auto\"><strong>Note:<\/strong> This example uses <em>trailing commas<\/em>, also referred to as <em>dangling commas<\/em>. This is a JavaScript formatting practice in which the final item in a series when declaring a collection of data has a comma at the end. Though this formatting choice can be used for cleaner diffs and easier code manipulation, whether to use it or not is a matter of preference. For more information on trailing commas, see this <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas\" rel=\"nofollow\">Trailing Comma article<\/a> from the MDN web docs.<\/p>\n<p dir=\"auto\">Incidentally, this syntax is the same as the result of calling <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-object-methods-in-javascript#objectentries()\" rel=\"nofollow\"><code>Object.entries()<\/code><\/a> on an Object. This provides a ready-made way to convert an Object to a Map, as shown in the following code block:<\/p>\n<p dir=\"auto\">Alternatively, you can turn a Map back into an Object or an Array with a single line of code.<\/p>\n<p dir=\"auto\">The following converts a Map to an Object:<\/p>\n<p dir=\"auto\">This will result in the following value of <code>obj<\/code>:<\/p>\n<pre><code>Output{firstName: \"Luke\", lastName: \"Skywalker\", occupation: \"Jedi Knight\"}\n<\/code><\/pre>\n<p dir=\"auto\">Now, let’s convert a Map to an Array:<\/p>\n<p dir=\"auto\">This will result in the following Array for <code>arr<\/code>:<\/p>\n<pre><code>Output[ [\'firstName\', \'Luke\'],\n  [\'lastName\', \'Skywalker\'],\n  [\'occupation\', \'Jedi Knight\'] ]\n<\/code><\/pre>\n<h3 dir=\"auto\"><a id=\"user-content-map-keys\" class=\"anchor\" aria-hidden=\"true\" href=\"#map-keys\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Map Keys<\/h3>\n<p dir=\"auto\">Maps accept any data type as a key, and do not allow duplicate key values. We can demonstrate this by creating a map and using non-string values as keys, as well as setting two values to the same key.<\/p>\n<p dir=\"auto\">First, let’s initialize a map with non-string keys:<\/p>\n<p dir=\"auto\">This example will override the first key of <code>1<\/code> with the subsequent one, and it will treat <code>\'1\'<\/code> the string and <code>1<\/code> the number as unique keys:<\/p>\n<pre><code>Output0: {\"1\" =&gt; \"String one\"}\n1: {1 =&gt; \"Number one\"}\n2: {true =&gt; \"A Boolean\"}\n<\/code><\/pre>\n<p dir=\"auto\">Although it is a common belief that a regular JavaScript Object can already handle Numbers, booleans, and other primitive data types as keys, this is actually not the case, because Objects change all keys to strings.<\/p>\n<p dir=\"auto\">As an example, initialize an object with a numerical key and compare the value for a numerical <code>1<\/code> key and a stringified <code>\"1\"<\/code> key:<\/p>\n<p dir=\"auto\">This is why if you attempt to use an Object as a key, it will print out the string <code>object Object<\/code> instead.<\/p>\n<p dir=\"auto\">As an example, create an Object and then use it as the key of another Object:<\/p>\n<p dir=\"auto\">This will yield the following:<\/p>\n<pre><code>Output{[object Object]: \"What will happen?\"}\n<\/code><\/pre>\n<p dir=\"auto\">This is not the case with Map. Try creating an Object and setting it as the key of a Map:<\/p>\n<p dir=\"auto\">The <code>key<\/code> of the Map element is now the object we created.<\/p>\n<pre><code>Outputkey: {foo: \"bar\"}\nvalue: \"What will happen?\"\n<\/code><\/pre>\n<p dir=\"auto\">There is one important thing to note about using an Object or Array as a key: the Map is using the reference to the Object to compare equality, not the literal value of the Object. In JavaScript <code>{} === {}<\/code> returns <code>false<\/code>, because the two Objects are not the same two Objects, despite having the same (empty) value.<\/p>\n<p dir=\"auto\">That means that adding two unique Objects with the same value will create a Map with two entries:<\/p>\n<p dir=\"auto\">This will yield the following:<\/p>\n<pre><code>OutputMap(2) {{…} =&gt; \"One\", {…} =&gt; \"Two\"}\n<\/code><\/pre>\n<p dir=\"auto\">But using the same Object reference twice will create a Map with one entry.<\/p>\n<p dir=\"auto\">Which will result in the following:<\/p>\n<pre><code>OutputMap(1) {{…} =&gt; \"Two\"}\n<\/code><\/pre>\n<p dir=\"auto\">The second <code>set()<\/code> is updating the same exact key as the first, so we end up with a Map that only has one value.<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-getting-and-deleting-items-from-a-map\" class=\"anchor\" aria-hidden=\"true\" href=\"#getting-and-deleting-items-from-a-map\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Getting and Deleting Items from a Map<\/h3>\n<p dir=\"auto\">One of the disadvantages of working with Objects is that it can be difficult to enumerate them, or work with all the keys or values. The Map structure, by contrast, has a lot of built-in properties that make working with their elements more direct.<\/p>\n<p dir=\"auto\">We can initialize a new Map to demonstrate the following methods and properties: <code>delete()<\/code>, <code>has()<\/code>, <code>get()<\/code>, and <code>size<\/code>.<\/p>\n<p dir=\"auto\">Use the <code>has()<\/code> method to check for the existence of an item in a map. <code>has()<\/code> will return a Boolean.<\/p>\n<p dir=\"auto\">Use the <code>get()<\/code> method to retrieve a value by key.<\/p>\n<p dir=\"auto\">One particular benefit Maps have over Objects is that you can find the size of a Map at any time, like you can with an Array. You can get the count of items in a Map with the <code>size<\/code> property. This involves fewer steps than converting an Object to an Array to find the length.<\/p>\n<p dir=\"auto\">Use the <code>delete()<\/code> method to remove an item from a Map by key. The method will return a Boolean—<code>true<\/code> if an item existed and was deleted, and <code>false<\/code> if it did not match any item.<\/p>\n<p dir=\"auto\">This will result in the following Map:<\/p>\n<pre><code>OutputMap(3) {\"animal\" =&gt; \"otter\", \"shape\" =&gt; \"triangle\", \"country\" =&gt; \"Bulgaria\"}\n<\/code><\/pre>\n<p dir=\"auto\">Finally, a Map can be cleared of all values with <code>map.clear()<\/code>.<\/p>\n<p dir=\"auto\">This will yield:<\/p>\n<pre><code>OutputMap(0) {}\n<\/code><\/pre>\n<h3 dir=\"auto\"><a id=\"user-content-keys-values-and-entries-for-maps\" class=\"anchor\" aria-hidden=\"true\" href=\"#keys-values-and-entries-for-maps\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Keys, Values, and Entries for Maps<\/h3>\n<p dir=\"auto\">Objects can retrieve keys, values, and entries by using the properties of the <code>Object<\/code> constructor. Maps, on the other hand, have prototype methods that allow us to get the keys, values, and entries of the Map instance directly.<\/p>\n<p dir=\"auto\">The <code>keys()<\/code>, <code>values()<\/code>, and <code>entries()<\/code> methods all return a <code>MapIterator<\/code>, which is similar to an Array in that you can use <code>for...of<\/code> to loop through the values.<\/p>\n<p dir=\"auto\">Here is another example of a Map, which we can use to demonstrate these methods:<\/p>\n<p dir=\"auto\">The <code>keys()<\/code> method returns the keys:<\/p>\n<pre><code>OutputMapIterator {1970, 1980, 1990}\n<\/code><\/pre>\n<p dir=\"auto\">The <code>values()<\/code> method returns the values:<\/p>\n<pre><code>OutputMapIterator {\"bell bottoms\", \"leg warmers\", \"flannel\"}\n<\/code><\/pre>\n<p dir=\"auto\">The <code>entries()<\/code> method returns an array of key/value pairs:<\/p>\n<pre><code>OutputMapIterator {1970 =&gt; \"bell bottoms\", 1980 =&gt; \"leg warmers\", 1990 =&gt; \"flannel\"}\n<\/code><\/pre>\n<h3 dir=\"auto\"><a id=\"user-content-iteration-with-map\" class=\"anchor\" aria-hidden=\"true\" href=\"#iteration-with-map\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Iteration with Map<\/h3>\n<p dir=\"auto\">Map has a built-in <code>forEach<\/code> method, similar to an Array, for built-in iteration. However, there is a bit of a difference in what they iterate over. The callback of a Map’s <code>forEach<\/code> iterates through the <code>value<\/code>, <code>key<\/code>, and <code>map<\/code> itself, while the Array version iterates through the <code>item<\/code>, <code>index<\/code>, and <code>array<\/code> itself.<\/p>\n<p dir=\"auto\">This is a big advantage for Maps over Objects, as Objects need to be converted with <code>keys()<\/code>, <code>values()<\/code>, or <code>entries()<\/code>, and there is not a simple way to retrieve the properties of an Object without converting it.<\/p>\n<p dir=\"auto\">To demonstrate this, let’s iterate through our Map and log the key/value pairs to the console:<\/p>\n<p dir=\"auto\">This will give:<\/p>\n<pre><code>Output1970: bell bottoms\n1980: leg warmers\n1990: flannel\n<\/code><\/pre>\n<p dir=\"auto\">Since a <code>for...of<\/code> loop iterates over iterables like Map and Array, we can get the exact same result by destructuring the array of Map items:<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-map-properties-and-methods\" class=\"anchor\" aria-hidden=\"true\" href=\"#map-properties-and-methods\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Map Properties and Methods<\/h3>\n<p dir=\"auto\">The following table shows a list of Map properties and methods for quick reference:<\/p>\n<p dir=\"auto\">Properties/Methods<\/p>\n<p dir=\"auto\">Description<\/p>\n<p dir=\"auto\">Returns<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\" rel=\"nofollow\"><code>set(key, value)<\/code><\/a><\/p>\n<p dir=\"auto\">Appends a key/value pair to a Map<\/p>\n<p dir=\"auto\"><code>Map<\/code> Object<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\" rel=\"nofollow\"><code>delete(key)<\/code><\/a><\/p>\n<p dir=\"auto\">Removes a key/value pair from a Map by key<\/p>\n<p dir=\"auto\">Boolean<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\" rel=\"nofollow\"><code>get(key)<\/code><\/a><\/p>\n<p dir=\"auto\">Returns a value by key<\/p>\n<p dir=\"auto\">value<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\" rel=\"nofollow\"><code>has(key)<\/code><\/a><\/p>\n<p dir=\"auto\">Checks for the presence of an element in a Map by key<\/p>\n<p dir=\"auto\">Boolean<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\" rel=\"nofollow\"><code>clear()<\/code><\/a><\/p>\n<p dir=\"auto\">Removes all items from a Map<\/p>\n<p dir=\"auto\">N/A<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\" rel=\"nofollow\"><code>keys()<\/code><\/a><\/p>\n<p dir=\"auto\">Returns all keys in a Map<\/p>\n<p dir=\"auto\"><code>MapIterator<\/code> object<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\" rel=\"nofollow\"><code>values()<\/code><\/a><\/p>\n<p dir=\"auto\">Returns all values in a Map<\/p>\n<p dir=\"auto\"><code>MapIterator<\/code> object<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\" rel=\"nofollow\"><code>entries()<\/code><\/a><\/p>\n<p dir=\"auto\">Returns all keys and values in a Map as <code>[key, value]<\/code><\/p>\n<p dir=\"auto\"><code>MapIterator<\/code> object<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\" rel=\"nofollow\"><code>forEach()<\/code><\/a><\/p>\n<p dir=\"auto\">Iterates through the Map in insertion order<\/p>\n<p dir=\"auto\">N/A<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\" rel=\"nofollow\"><code>size<\/code><\/a><\/p>\n<p dir=\"auto\">Returns the number of items in a Map<\/p>\n<p dir=\"auto\">Number<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-when-to-use-map\" class=\"anchor\" aria-hidden=\"true\" href=\"#when-to-use-map\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>When to Use Map<\/h3>\n<p dir=\"auto\">Summing up, Maps are similar to Objects in that they hold key/value pairs, but Maps have several advantages over objects:<\/p>\n<ul dir=\"auto\">\n<li><strong>Size<\/strong> - Maps have a <code>size<\/code> property, whereas Objects do not have a built-in way to retrieve their size.<\/li>\n<li><strong>Iteration<\/strong> - Maps are directly iterable, whereas Objects are not.<\/li>\n<li><strong>Flexibility<\/strong> - Maps can have any data type (primitive or Object) as the key to a value, while Objects can only have strings.<\/li>\n<li><strong>Ordered<\/strong> - Maps retain their insertion order, whereas objects do not have a guaranteed order.<\/li>\n<\/ul>\n<p dir=\"auto\">Due to these factors, Maps are a powerful data structure to consider. However, Objects haves some important advantages as well:<\/p>\n<ul dir=\"auto\">\n<li><strong>JSON<\/strong> - Objects work flawlessly with <code>JSON.parse()<\/code> and <code>JSON.stringify()<\/code>, two essential functions for working with <a href=\"https://www.digitalocean.com/community/tutorials/how-to-work-with-json-in-javascript\" rel=\"nofollow\">JSON<\/a>, a common data format that many REST APIs deal with.<\/li>\n<li><strong>Working with a single element<\/strong> - Working with a known value in an Object, you can access it directly with the key without the need to use a method, such as Map’s <code>get()<\/code>.<\/li>\n<\/ul>\n<p dir=\"auto\">This list will help you decide if a Map or Object is the right data structure for your use case.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-set\" class=\"anchor\" aria-hidden=\"true\" href=\"#set\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Set<\/h2>\n<p dir=\"auto\">A Set is a collection of unique values. Unlike a Map, a Set is conceptually more similar to an Array than an Object, since it is a list of values and not key/value pairs. However, Set is not a replacement for Arrays, but rather a supplement for providing additional support for working with duplicated data.<\/p>\n<p dir=\"auto\">You can initialize Sets with the <code>new Set()<\/code> syntax.<\/p>\n<p dir=\"auto\">This gives us an empty Set:<\/p>\n<pre><code>OutputSet(0) {}\n<\/code><\/pre>\n<p dir=\"auto\">Items can be added to a Set with the <code>add()<\/code> method. (This is not to be confused with the <code>set()<\/code> method available to Map, although they are similar.)<\/p>\n<p dir=\"auto\">Since Sets can only contain unique values, any attempt to add a value that already exists will be ignored.<\/p>\n<p dir=\"auto\"><strong>Note<\/strong>: The same equality comparison that applies to Map keys applies to Set items. Two objects that have the same value but do not share the same reference will not be considered equal.<\/p>\n<p dir=\"auto\">You can also initialize Sets with an Array of values. If there are duplicate values in the array, they will be removed from the Set.<\/p>\n<pre><code>OutputSet(3) {\"Beethoven\", \"Mozart\", \"Chopin\"}\n<\/code><\/pre>\n<p dir=\"auto\">Conversely, a Set can be converted into an Array with one line of code:<\/p>\n<pre><code>Output(3) [\"Beethoven\", \"Mozart\", \"Chopin\"]\n<\/code><\/pre>\n<p dir=\"auto\">Set has many of the same methods and properties as Map, including <code>delete()<\/code>, <code>has()<\/code>, <code>clear()<\/code>, and <code>size<\/code>.<\/p>\n<p dir=\"auto\">Note that Set does not have a way to access a value by a key or index, like <code>Map.get(key)<\/code> or <code>arr[index]<\/code>.<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-keys-values-and-entries-for-sets\" class=\"anchor\" aria-hidden=\"true\" href=\"#keys-values-and-entries-for-sets\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Keys, Values, and Entries for Sets<\/h3>\n<p dir=\"auto\">Map and Set both have <code>keys()<\/code>, <code>values()<\/code>, and <code>entries()<\/code> methods that return an Iterator. However, while each one of these methods have a distinct purpose in Map, Sets do not have keys, and therefore keys are an alias for values. This means that <code>keys()<\/code> and <code>values()<\/code> will both return the same Iterator, and <code>entries()<\/code> will return the value twice. It makes the most sense to only use <code>values()<\/code> with Set, as the other two methods exist for consistency and cross-compatibility with Map.<\/p>\n<pre><code>OutputSetIterator {1, 2, 3}\n<\/code><\/pre>\n<h3 dir=\"auto\"><a id=\"user-content-iteration-with-set\" class=\"anchor\" aria-hidden=\"true\" href=\"#iteration-with-set\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Iteration with Set<\/h3>\n<p dir=\"auto\">Like Map, Set has a built-in <code>forEach()<\/code> method. Since Sets don’t have keys, the first and second parameter of the <code>forEach()<\/code> callback return the same value, so there is no use case for it outside of compatibility with Map. The parameters of <code>forEach()<\/code> are <code>(value, key, set)<\/code>.<\/p>\n<p dir=\"auto\">Both <code>forEach()<\/code> and <code>for...of<\/code> can be used on Set. First, let’s look at <code>forEach()<\/code> iteration:<\/p>\n<p dir=\"auto\">Then we can write the <code>for...of<\/code> version:<\/p>\n<p dir=\"auto\">Both of these strategies will yield the following:<\/p>\n<pre><code>Outputhi\nhello\ngood day\n<\/code><\/pre>\n<h3 dir=\"auto\"><a id=\"user-content-set-properties-and-methods\" class=\"anchor\" aria-hidden=\"true\" href=\"#set-properties-and-methods\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Set Properties and Methods<\/h3>\n<p dir=\"auto\">The following table shows a list of Set properties and methods for quick reference:<\/p>\n<p dir=\"auto\">Properties/Methods<\/p>\n<p dir=\"auto\">Description<\/p>\n<p dir=\"auto\">Returns<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add\" rel=\"nofollow\"><code>add(value)<\/code><\/a><\/p>\n<p dir=\"auto\">Appends a new item to a Set<\/p>\n<p dir=\"auto\"><code>Set<\/code> Object<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\" rel=\"nofollow\"><code>delete(value)<\/code><\/a><\/p>\n<p dir=\"auto\">Removes the specified item from a Set<\/p>\n<p dir=\"auto\">Boolean<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has\" rel=\"nofollow\"><code>has()<\/code><\/a><\/p>\n<p dir=\"auto\">Checks for the presence of an item in a Set<\/p>\n<p dir=\"auto\">Boolean<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\" rel=\"nofollow\"><code>clear()<\/code><\/a><\/p>\n<p dir=\"auto\">Removes all items from a Set<\/p>\n<p dir=\"auto\">N/A<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\" rel=\"nofollow\"><code>keys()<\/code><\/a><\/p>\n<p dir=\"auto\">Returns all values in a Set (same as <code>values()<\/code>)<\/p>\n<p dir=\"auto\"><code>SetIterator<\/code> object<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\" rel=\"nofollow\"><code>values()<\/code><\/a><\/p>\n<p dir=\"auto\">Returns all values in a Set (same as <code>keys()<\/code>)<\/p>\n<p dir=\"auto\"><code>SetIterator<\/code> object<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\" rel=\"nofollow\"><code>entries()<\/code><\/a><\/p>\n<p dir=\"auto\">Returns all values in a Set as <code>[value, value]<\/code><\/p>\n<p dir=\"auto\"><code>SetIterator<\/code> object<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\" rel=\"nofollow\"><code>forEach()<\/code><\/a><\/p>\n<p dir=\"auto\">Iterates through the Set in insertion order<\/p>\n<p dir=\"auto\">N/A<\/p>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size\" rel=\"nofollow\"><code>size<\/code><\/a><\/p>\n<p dir=\"auto\">Returns the number of items in a Set<\/p>\n<p dir=\"auto\">Number<\/p>\n<h3 dir=\"auto\"><a id=\"user-content-when-to-use-set\" class=\"anchor\" aria-hidden=\"true\" href=\"#when-to-use-set\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>When to Use Set<\/h3>\n<p dir=\"auto\">Set is a useful addition to your JavaScript toolkit, particularly for working with duplicate values in data.<\/p>\n<p dir=\"auto\">In a single line, we can create a new Array without duplicate values from an Array that has duplicate values.<\/p>\n<p dir=\"auto\">This will give:<\/p>\n<pre><code>Output(3) [1, 2, 3]\n<\/code><\/pre>\n<p dir=\"auto\">Set can be used for finding the union, intersection, and difference between two sets of data. However, Arrays have a significant advantage over Sets for additional manipulation of the data due to the <code>sort()<\/code>, <code>map()<\/code>, <code>filter()<\/code>, and <code>reduce()<\/code> methods, as well as direct compatibility with <code>JSON<\/code> methods.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-conclusion\" class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Conclusion<\/h2>\n<p dir=\"auto\">In this article, you learned that a Map is a collection of ordered key/value pairs, and that a Set is a collection of unique values. Both of these data structures add additional capabilities to JavaScript and simplify common tasks such as finding the length of a key/value pair collection and removing duplicate items from a data set, respectively. On the other hand, Objects and Arrays have been traditionally used for data storage and manipulation in JavaScript, and have direct compatibility with JSON, which continues to make them the most essential data structures, especially for working with REST APIs. Maps and Sets are primarily useful as supporting data structures for Objects and Arrays.<\/p>\n<p dir=\"auto\">If you would like to learn more about JavaScript, check out the homepage for our <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-javascript\" rel=\"nofollow\">How To Code in JavaScript series<\/a>, or browse our <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\" rel=\"nofollow\">How to Code in Node.js series<\/a> for articles on back-end development.<\/p>\n<\/article>\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45/raw/4f00bac8747a9543aa1f251d228c09fd8e796183/Understanding%20Map%20and%20Set%20Objects%20in%20JavaScript%20%20DigitalOcean.md\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45#file-understanding-map-and-set-objects-in-javascript-digitalocean-md\">\n          Understanding Map and Set Objects in JavaScript  DigitalOcean.md\n        <\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-understanding-modules-and-import-and-export-statements-in-javascript-digitalocean-md\" class=\"file my-2\">\n      <div id=\"file-understanding-modules-and-import-and-export-statements-in-javascript-digitalocean-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p dir=\"auto\"><em>The author selected the <a href=\"https://www.brightfunds.org/funds/write-for-donations-covid-19-relief-fund\" rel=\"nofollow\">COVID-19 Relief Fund<\/a> to receive a donation as part of the <a href=\"https://do.co/w4do-cta\" rel=\"nofollow\">Write for DOnations<\/a> program.<\/em><\/p>\n<h3 dir=\"auto\"><a id=\"user-content-introduction\" class=\"anchor\" aria-hidden=\"true\" href=\"#introduction\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Introduction<\/h3>\n<p dir=\"auto\">In the early days of the Web, websites consisted primarily of <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-build-a-website-with-html\" rel=\"nofollow\">HTML<\/a> and <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-build-a-website-with-css\" rel=\"nofollow\">CSS<\/a>. If any JavaScript loaded into a page at all, it was usually in the form of small snippets that provided effects and interactivity. As a result, JavaScript programs were often written entirely in one file and loaded into a <code>script<\/code> tag. A developer could break the JavaScript up into multiple files, but all variables and <a href=\"https://www.digitalocean.com/community/tutorials/how-to-define-functions-in-javascript\" rel=\"nofollow\">functions<\/a> would still be added to the global <a href=\"https://www.digitalocean.com/community/tutorials/understanding-variables-scope-hoisting-in-javascript\" rel=\"nofollow\">scope<\/a>.<\/p>\n<p dir=\"auto\">But as websites have evolved with the advent of frameworks like <a href=\"https://www.digitalocean.com/community/tags/angularjs\" rel=\"nofollow\">Angular<\/a>, <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-react-js\" rel=\"nofollow\">React<\/a>, and <a href=\"https://www.digitalocean.com/community/tags/vue-js\" rel=\"nofollow\">Vue<\/a>, and with companies creating advanced web applications instead of desktop applications, JavaScript now plays a major role in the browser. As a result, there is a much greater need to use third-party code for common tasks, to break up code into modular files, and to avoid polluting the global namespace.<\/p>\n<p dir=\"auto\">The <a href=\"http://www.ecma-international.org/ecma-262/6.0/\" rel=\"nofollow\">ECMAScript 2015<\/a> specification introduced <em>modules<\/em> to the JavaScript language, which allowed for the use of <code>import<\/code> and <code>export<\/code> statements. In this tutorial, you will learn what a JavaScript module is and how to use <code>import<\/code> and <code>export<\/code> to organize your code.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-modular-programming\" class=\"anchor\" aria-hidden=\"true\" href=\"#modular-programming\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Modular Programming<\/h2>\n<p dir=\"auto\">Before the concept of modules appeared in JavaScript, when a developer wanted to organize their code into segments, they would create multiple files and link to them as separate scripts. To demonstrate this, create an example <code>index.html<\/code> file and two JavaScript files, <code>functions.js<\/code> and <code>script.js<\/code>.<\/p>\n<p dir=\"auto\">The <code>index.html<\/code> file will display the sum, difference, product, and quotient of two numbers, and link to the two JavaScript files in <code>script<\/code> tags. Open <code>index.html<\/code> in a text editor and add the following code:<\/p>\n<p dir=\"auto\">index.html<\/p>\n<p dir=\"auto\">This HTML will display the value of variables <code>x<\/code> and <code>y<\/code> in an <code>h2<\/code> header, and the value of operations on those variables in the following <code>p<\/code> elements. The <code>id<\/code> attributes of the elements are set for <a href=\"https://www.digitalocean.com/community/tutorial_series/understanding-the-dom-document-object-model\" rel=\"nofollow\">DOM manipulation<\/a>, which will happen in the <code>script.js<\/code> file; this file will also set the values of <code>x<\/code> and <code>y<\/code>. For more information on HTML, check out our <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-build-a-website-with-html\" rel=\"nofollow\">How To Build a Website with HTML<\/a> series.<\/p>\n<p dir=\"auto\">The <code>functions.js<\/code> file will contain the mathematical functions that will be used in the second script. Open the <code>functions.js<\/code> file and add the following:<\/p>\n<p dir=\"auto\">functions.js<\/p>\n<p dir=\"auto\">Finally, the <code>script.js<\/code> file will determine the values of <code>x<\/code> and <code>y<\/code>, apply the functions to them, and display the result:<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">After setting up these files and saving them, you can <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-and-understand-html-elements#how-to-view-an-offline-html-file-in-your-browser\" rel=\"nofollow\">open <code>index.html<\/code> in a browser<\/a> to display your website with all the results:<\/p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/02b5be33e8f4ce27062c5e123b202b9a0ed49cec1215bc524c6dbb2bb37262c2/68747470733a2f2f6173736574732e6469676974616c6f6365616e2e636f6d2f61727469636c65732f36373536302f312e706e67\"><img src=\"https://camo.githubusercontent.com/02b5be33e8f4ce27062c5e123b202b9a0ed49cec1215bc524c6dbb2bb37262c2/68747470733a2f2f6173736574732e6469676974616c6f6365616e2e636f6d2f61727469636c65732f36373536302f312e706e67\" alt=\"Rendered HTML with the values 10 and 5 and the results of the functions.js operations.\" data-canonical-src=\"https://assets.digitalocean.com/articles/67560/1.png\" style=\"max-width: 100%;\"><\/a><\/p>\n<p dir=\"auto\">For websites with a few small scripts, this is an effective way to divide the code. However, there are some issues associated with this approach, including:<\/p>\n<ul dir=\"auto\">\n<li><strong>Polluting the global namespace<\/strong>: All the variables you created in your scripts—<code>sum<\/code>, <code>difference<\/code>, etc.—now exist on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\" rel=\"nofollow\"><code>window<\/code><\/a> object. If you attempted to use another variable called <code>sum<\/code> in another file, it would become difficult to know which value would be used at any point in the scripts, since they would all be using the same <code>window.sum<\/code> variable. The only way a variable could be private was by putting it within a function scope. There could even be a conflict between an <code>id<\/code> in the DOM named <code>x<\/code> and <code>var x<\/code>.<\/li>\n<li><strong>Dependency management<\/strong>: Scripts would have to be loaded in order from top to bottom to ensure the correct variables were available. Saving the scripts as different files gives the illusion of separation, but it is essentially the same as having a single inline <code>&lt;script&gt;<\/code> in the browser page.<\/li>\n<\/ul>\n<p dir=\"auto\">Before ES6 added native modules to the JavaScript language, the community attempted to come up with several solutions. The first solutions were written in vanilla JavaScript, such as writing all code in <a href=\"https://www.digitalocean.com/community/tutorials/understanding-objects-in-javascript\" rel=\"nofollow\">objects<\/a> or <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\" rel=\"nofollow\">immediately invoked function expressions (IIFEs)<\/a> and placing them on a single object in the global namespace. This was an improvement on the multiple script approach, but still had the same problems of putting at least one object in the global namespace, and did not make the problem of consistently sharing code between third parties any easier.<\/p>\n<p dir=\"auto\">After that, a few module solutions emerged: <a href=\"https://en.wikipedia.org/wiki/CommonJS\" rel=\"nofollow\">CommonJS<\/a>, a synchronous approach that was implemented in <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\" rel=\"nofollow\">Node.js<\/a>, <a href=\"https://en.wikipedia.org/wiki/Asynchronous_module_definition\" rel=\"nofollow\">Asynchronous Module Definition (AMD)<\/a>, which was an asynchronous approach, and <a href=\"https://github.com/umdjs/umd\">Universal Module Definition (UMD)<\/a>, which was intended to be a universal approach that supported both previous styles.<\/p>\n<p dir=\"auto\">The advent of these solutions made it easier for developers to share and reuse code in the form of <em>packages<\/em>, modules that can be distributed and shared, such as the ones found on <a href=\"https://www.npmjs.com/\" rel=\"nofollow\">npm<\/a>. However, since there were many solutions and none were native to JavaScript, tools like <a href=\"https://babeljs.io/\" rel=\"nofollow\">Babel<\/a>, <a href=\"https://webpack.js.org/\" rel=\"nofollow\">Webpack<\/a>, or <a href=\"http://browserify.org/\" rel=\"nofollow\">Browserify<\/a> had to be implemented to use modules in browsers.<\/p>\n<p dir=\"auto\">Due to the many problems with the multiple file approach and the complexity of the solutions proposed, developers were interested in bringing the <a href=\"https://en.wikipedia.org/wiki/Modular_programming\" rel=\"nofollow\">modular programming<\/a> approach to the JavaScript language. Because of this, ECMAScript 2015 supports the use of JavaScript modules.<\/p>\n<p dir=\"auto\">A <em>module<\/em> is a bundle of code that acts as an interface to provide functionality for other modules to use, as well as being able to rely on the functionality of other modules. A module <em>exports<\/em> to provide code and <em>imports<\/em> to use other code. Modules are useful because they allow developers to reuse code, they provide a stable, consistent interface that many developers can use, and they do not pollute the global namespace.<\/p>\n<p dir=\"auto\">Modules (sometimes referred to as ECMAScript modules or ES Modules) are now available natively in JavaScript, and in the rest of this tutorial you will explore how to use and implement them in your code.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-native-javascript-modules\" class=\"anchor\" aria-hidden=\"true\" href=\"#native-javascript-modules\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Native JavaScript Modules<\/h2>\n<p dir=\"auto\">Modules in JavaScript use the <code>import<\/code> and <code>export<\/code> keywords:<\/p>\n<ul dir=\"auto\">\n<li><code>import<\/code>: Used to read code exported from another module.<\/li>\n<li><code>export<\/code>: Used to provide code to other modules.<\/li>\n<\/ul>\n<p dir=\"auto\">To demonstrate how to use this, update your <code>functions.js<\/code> file to be a module and export the functions. You will add <code>export<\/code> in front of each function, which will make them available to any other module.<\/p>\n<p dir=\"auto\">Add the following highlighted code to your file:<\/p>\n<p dir=\"auto\">functions.js<\/p>\n<p dir=\"auto\">Now, in <code>script.js<\/code>, you will use <code>import<\/code> to retrieve the code from the <code>functions.js<\/code> module at the top of the file.<\/p>\n<p dir=\"auto\"><strong>Note<\/strong>: <code>import<\/code> must always be at the top of the file before any other code, and it is also necessary to include the relative path (<code>./<\/code> in this case).<\/p>\n<p dir=\"auto\">Add the following highlighted code to <code>script.js<\/code>:<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">Notice that individual functions are imported by naming them in curly braces.<\/p>\n<p dir=\"auto\">In order to ensure this code gets loaded as a module and not a regular script, add <code>type=\"module\"<\/code> to the <code>script<\/code> tags in <code>index.html<\/code>. Any code that uses <code>import<\/code> or <code>export<\/code> must use this attribute:<\/p>\n<p dir=\"auto\">index.html<\/p>\n<p dir=\"auto\">At this point, you will be able to reload the page with the updates and the website will now use modules. Browser support is very high, but <a href=\"https://caniuse.com/?search=modules\" rel=\"nofollow\">caniuse<\/a> is available to check which browsers support it. Note that if you are viewing the file as a direct link to a local file, you will encounter this error:<\/p>\n<pre><code>OutputAccess to script at \'file:///Users/your_file_path/script.js\' from origin \'null\' has been blocked by CORS policy: Cross-origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, chrome-untrusted, https.\n<\/code><\/pre>\n<p dir=\"auto\">Because of the <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" rel=\"nofollow\">CORS policy<\/a>, Modules must be used in a server environment, which you can set up locally with <a href=\"https://www.npmjs.com/package/http-server\" rel=\"nofollow\">http-server<\/a> or on the internet with a hosting provider.<\/p>\n<p dir=\"auto\">Modules are different from regular scripts in a few ways:<\/p>\n<ul dir=\"auto\">\n<li>Modules do not add anything to the global (<code>window<\/code>) scope.<\/li>\n<li>Modules always are in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"nofollow\">strict mode<\/a>.<\/li>\n<li>Loading the same module twice in the same file will have no effect, as modules are only executed once.<\/li>\n<li>Modules require a server environment.<\/li>\n<\/ul>\n<p dir=\"auto\">Modules are still often used alongside bundlers like Webpack for increased browser support and additional features, but they are also available for use directly in browsers.<\/p>\n<p dir=\"auto\">Next, you will explore some more ways in which the <code>import<\/code> and <code>export<\/code> syntax can be used.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-named-exports\" class=\"anchor\" aria-hidden=\"true\" href=\"#named-exports\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Named Exports<\/h2>\n<p dir=\"auto\">As demonstrated earlier, using the <code>export<\/code> syntax will allow you to individually import values that have been exported by their name. For example, take this simplified version of <code>functions.js<\/code>:<\/p>\n<p dir=\"auto\">functions.js<\/p>\n<p dir=\"auto\">This would let you import <code>sum<\/code> and <code>difference<\/code> by name using curly braces:<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">It is also possible to use an alias to rename the function. You might do this to avoid naming conflicts within the same module. In this example, <code>sum<\/code> will be renamed to <code>add<\/code> and <code>difference<\/code> will be renamed to <code>subtract<\/code>.<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">Calling <code>add()<\/code> here will yield the result of the <code>sum()<\/code> function.<\/p>\n<p dir=\"auto\">Using the <code>*<\/code> syntax, you can import the contents of the entire module into one object. In this case, <code>sum<\/code> and <code>difference<\/code> will become methods on the <code>mathFunctions<\/code> object.<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">Primitive values, function expressions and definitions, <a href=\"https://www.digitalocean.com/community/tutorials/understanding-the-event-loop-callbacks-promises-and-async-await-in-javascript#async-functions-with-asyncawait\" rel=\"nofollow\">asynchronous functions<\/a>, <a href=\"https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript\" rel=\"nofollow\">classes<\/a>, and instantiated classes can all be exported, as long as they have an identifier:<\/p>\n<p dir=\"auto\">All of these exports can be successfully imported. The other type of export that you will explore in the next section is known as a default export.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-default-exports\" class=\"anchor\" aria-hidden=\"true\" href=\"#default-exports\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Default Exports<\/h2>\n<p dir=\"auto\">In the previous examples, you exported multiple named exports and imported them individually or as one object with each export as a method on the object. Modules can also contain a default export, using the <code>default<\/code> keyword. A default export will not be imported with curly brackets, but will be directly imported into a named identifier.<\/p>\n<p dir=\"auto\">For example, take the following contents for the <code>functions.js<\/code> file:<\/p>\n<p dir=\"auto\">functions.js<\/p>\n<p dir=\"auto\">In the <code>script.js<\/code> file, you could import the default function as <code>sum<\/code> with the following:<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">This can be dangerous, as there are no restrictions on what you can name a default export during the import. In this example, the default function is imported as <code>difference<\/code> although it is actually the <code>sum<\/code> function:<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">For this reason, it is often preferred to use named exports. Unlike named exports, default exports do not require an identifier—a primitive value by itself or anonymous function can be used as a default export. Following is an example of an object used as a default export:<\/p>\n<p dir=\"auto\">functions.js<\/p>\n<p dir=\"auto\">You could import this as <code>book<\/code> with the following:<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">Similarly, the following example demonstrates exporting an anonymous <a href=\"https://www.digitalocean.com/community/tutorials/understanding-arrow-functions-in-javascript\" rel=\"nofollow\">arrow function<\/a> as the default export:<\/p>\n<p dir=\"auto\">functions.js<\/p>\n<p dir=\"auto\">This could be imported with the following <code>script.js<\/code>:<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">Named exports and default exports can be used alongside each other, as in this module that exports two named values and a default value:<\/p>\n<p dir=\"auto\">functions.js<\/p>\n<p dir=\"auto\">You could import these variables and the default function with the following:<\/p>\n<p dir=\"auto\">script.js<\/p>\n<p dir=\"auto\">Now the default value and named values are both available to the script.<\/p>\n<h2 dir=\"auto\"><a id=\"user-content-conclusion\" class=\"anchor\" aria-hidden=\"true\" href=\"#conclusion\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"><\/path><\/svg><\/a>Conclusion<\/h2>\n<p dir=\"auto\">Modular programming design practices allow you to separate code into individual components that can help make your code reusable and consistent, while also protecting the global namespace. A module interface can be implemented in native JavaScript with the <code>import<\/code> and <code>export<\/code> keywords.<\/p>\n<p dir=\"auto\">In this article, you learned about the history of modules in JavaScript, how to separate JavaScript files into multiple top-level scripts, how to update those files using a modular approach, and the <code>import<\/code> and <code>export<\/code> syntax for named and default exports.<\/p>\n<p dir=\"auto\">To learn more about modules in JavaScript, read <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\" rel=\"nofollow\">Modules<\/a> on the Mozilla Developer Network. If you’d like to explore modules in Node.js, try our <a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-a-node-js-module\" rel=\"nofollow\">How To Create a Node.js Module tutorial<\/a>.<\/p>\n<\/article>\n  <\/div>\n\n  <\/div>\n<\/div>\n\n      <\/div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45/raw/4f00bac8747a9543aa1f251d228c09fd8e796183/Understanding%20Modules%20and%20Import%20and%20Export%20Statements%20in%20JavaScript%20%20DigitalOcean.md\" style=\"float:right\">view raw<\/a>\n        <a href=\"https://gist.github.com/bgoonz/8e7a8e4f4bb14bd1503e0768e3f2be45#file-understanding-modules-and-import-and-export-statements-in-javascript-digitalocean-md\">\n          Understanding Modules and Import and Export Statements in JavaScript  DigitalOcean.md\n        <\/a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub<\/a>\n      <\/div>\n    <\/div>\n<\/div>\n')